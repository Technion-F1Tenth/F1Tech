// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/common/proto/ceres_solver_options.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();

class CeresScanMatcherOptions3D;
class IntensityCostFunctionOptions;

// ===================================================================

class IntensityCostFunctionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions) */ {
 public:
  IntensityCostFunctionOptions();
  virtual ~IntensityCostFunctionOptions();

  IntensityCostFunctionOptions(const IntensityCostFunctionOptions& from);

  inline IntensityCostFunctionOptions& operator=(const IntensityCostFunctionOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntensityCostFunctionOptions& default_instance();

  void Swap(IntensityCostFunctionOptions* other);

  // implements Message ----------------------------------------------

  inline IntensityCostFunctionOptions* New() const { return New(NULL); }

  IntensityCostFunctionOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntensityCostFunctionOptions& from);
  void MergeFrom(const IntensityCostFunctionOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntensityCostFunctionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double weight = 1;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  double weight() const;
  void set_weight(double value);

  // optional double huber_scale = 2;
  void clear_huber_scale();
  static const int kHuberScaleFieldNumber = 2;
  double huber_scale() const;
  void set_huber_scale(double value);

  // optional float intensity_threshold = 3;
  void clear_intensity_threshold();
  static const int kIntensityThresholdFieldNumber = 3;
  float intensity_threshold() const;
  void set_intensity_threshold(float value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double weight_;
  double huber_scale_;
  float intensity_threshold_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();

  void InitAsDefaultInstance();
  static IntensityCostFunctionOptions* default_instance_;
};
// -------------------------------------------------------------------

class CeresScanMatcherOptions3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D) */ {
 public:
  CeresScanMatcherOptions3D();
  virtual ~CeresScanMatcherOptions3D();

  CeresScanMatcherOptions3D(const CeresScanMatcherOptions3D& from);

  inline CeresScanMatcherOptions3D& operator=(const CeresScanMatcherOptions3D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CeresScanMatcherOptions3D& default_instance();

  void Swap(CeresScanMatcherOptions3D* other);

  // implements Message ----------------------------------------------

  inline CeresScanMatcherOptions3D* New() const { return New(NULL); }

  CeresScanMatcherOptions3D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CeresScanMatcherOptions3D& from);
  void MergeFrom(const CeresScanMatcherOptions3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CeresScanMatcherOptions3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double occupied_space_weight = 1;
  int occupied_space_weight_size() const;
  void clear_occupied_space_weight();
  static const int kOccupiedSpaceWeightFieldNumber = 1;
  double occupied_space_weight(int index) const;
  void set_occupied_space_weight(int index, double value);
  void add_occupied_space_weight(double value);
  const ::google::protobuf::RepeatedField< double >&
      occupied_space_weight() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_occupied_space_weight();

  // optional double translation_weight = 2;
  void clear_translation_weight();
  static const int kTranslationWeightFieldNumber = 2;
  double translation_weight() const;
  void set_translation_weight(double value);

  // optional double rotation_weight = 3;
  void clear_rotation_weight();
  static const int kRotationWeightFieldNumber = 3;
  double rotation_weight() const;
  void set_rotation_weight(double value);

  // optional bool only_optimize_yaw = 5;
  void clear_only_optimize_yaw();
  static const int kOnlyOptimizeYawFieldNumber = 5;
  bool only_optimize_yaw() const;
  void set_only_optimize_yaw(bool value);

  // optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  bool has_ceres_solver_options() const;
  void clear_ceres_solver_options();
  static const int kCeresSolverOptionsFieldNumber = 6;
  const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options() const;
  ::cartographer::common::proto::CeresSolverOptions* mutable_ceres_solver_options();
  ::cartographer::common::proto::CeresSolverOptions* release_ceres_solver_options();
  void set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options);

  // repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
  int intensity_cost_function_options_size() const;
  void clear_intensity_cost_function_options();
  static const int kIntensityCostFunctionOptionsFieldNumber = 7;
  const ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions& intensity_cost_function_options(int index) const;
  ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* mutable_intensity_cost_function_options(int index);
  ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* add_intensity_cost_function_options();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >*
      mutable_intensity_cost_function_options();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >&
      intensity_cost_function_options() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< double > occupied_space_weight_;
  mutable int _occupied_space_weight_cached_byte_size_;
  double translation_weight_;
  double rotation_weight_;
  ::cartographer::common::proto::CeresSolverOptions* ceres_solver_options_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions > intensity_cost_function_options_;
  bool only_optimize_yaw_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto();

  void InitAsDefaultInstance();
  static CeresScanMatcherOptions3D* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IntensityCostFunctionOptions

// optional double weight = 1;
inline void IntensityCostFunctionOptions::clear_weight() {
  weight_ = 0;
}
inline double IntensityCostFunctionOptions::weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.weight)
  return weight_;
}
inline void IntensityCostFunctionOptions::set_weight(double value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.weight)
}

// optional double huber_scale = 2;
inline void IntensityCostFunctionOptions::clear_huber_scale() {
  huber_scale_ = 0;
}
inline double IntensityCostFunctionOptions::huber_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.huber_scale)
  return huber_scale_;
}
inline void IntensityCostFunctionOptions::set_huber_scale(double value) {
  
  huber_scale_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.huber_scale)
}

// optional float intensity_threshold = 3;
inline void IntensityCostFunctionOptions::clear_intensity_threshold() {
  intensity_threshold_ = 0;
}
inline float IntensityCostFunctionOptions::intensity_threshold() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.intensity_threshold)
  return intensity_threshold_;
}
inline void IntensityCostFunctionOptions::set_intensity_threshold(float value) {
  
  intensity_threshold_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.intensity_threshold)
}

// -------------------------------------------------------------------

// CeresScanMatcherOptions3D

// repeated double occupied_space_weight = 1;
inline int CeresScanMatcherOptions3D::occupied_space_weight_size() const {
  return occupied_space_weight_.size();
}
inline void CeresScanMatcherOptions3D::clear_occupied_space_weight() {
  occupied_space_weight_.Clear();
}
inline double CeresScanMatcherOptions3D::occupied_space_weight(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return occupied_space_weight_.Get(index);
}
inline void CeresScanMatcherOptions3D::set_occupied_space_weight(int index, double value) {
  occupied_space_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
}
inline void CeresScanMatcherOptions3D::add_occupied_space_weight(double value) {
  occupied_space_weight_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
}
inline const ::google::protobuf::RepeatedField< double >&
CeresScanMatcherOptions3D::occupied_space_weight() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return occupied_space_weight_;
}
inline ::google::protobuf::RepeatedField< double >*
CeresScanMatcherOptions3D::mutable_occupied_space_weight() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return &occupied_space_weight_;
}

// optional double translation_weight = 2;
inline void CeresScanMatcherOptions3D::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double CeresScanMatcherOptions3D::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.translation_weight)
  return translation_weight_;
}
inline void CeresScanMatcherOptions3D::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.translation_weight)
}

// optional double rotation_weight = 3;
inline void CeresScanMatcherOptions3D::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double CeresScanMatcherOptions3D::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.rotation_weight)
  return rotation_weight_;
}
inline void CeresScanMatcherOptions3D::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.rotation_weight)
}

// optional bool only_optimize_yaw = 5;
inline void CeresScanMatcherOptions3D::clear_only_optimize_yaw() {
  only_optimize_yaw_ = false;
}
inline bool CeresScanMatcherOptions3D::only_optimize_yaw() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.only_optimize_yaw)
  return only_optimize_yaw_;
}
inline void CeresScanMatcherOptions3D::set_only_optimize_yaw(bool value) {
  
  only_optimize_yaw_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.only_optimize_yaw)
}

// optional .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
inline bool CeresScanMatcherOptions3D::has_ceres_solver_options() const {
  return !_is_default_instance_ && ceres_solver_options_ != NULL;
}
inline void CeresScanMatcherOptions3D::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) delete ceres_solver_options_;
  ceres_solver_options_ = NULL;
}
inline const ::cartographer::common::proto::CeresSolverOptions& CeresScanMatcherOptions3D::ceres_solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  return ceres_solver_options_ != NULL ? *ceres_solver_options_ : *default_instance_->ceres_solver_options_;
}
inline ::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::mutable_ceres_solver_options() {
  
  if (ceres_solver_options_ == NULL) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  return ceres_solver_options_;
}
inline ::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::release_ceres_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = ceres_solver_options_;
  ceres_solver_options_ = NULL;
  return temp;
}
inline void CeresScanMatcherOptions3D::set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options) {
  delete ceres_solver_options_;
  ceres_solver_options_ = ceres_solver_options;
  if (ceres_solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
}

// repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
inline int CeresScanMatcherOptions3D::intensity_cost_function_options_size() const {
  return intensity_cost_function_options_.size();
}
inline void CeresScanMatcherOptions3D::clear_intensity_cost_function_options() {
  intensity_cost_function_options_.Clear();
}
inline const ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions& CeresScanMatcherOptions3D::intensity_cost_function_options(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return intensity_cost_function_options_.Get(index);
}
inline ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* CeresScanMatcherOptions3D::mutable_intensity_cost_function_options(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return intensity_cost_function_options_.Mutable(index);
}
inline ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* CeresScanMatcherOptions3D::add_intensity_cost_function_options() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return intensity_cost_function_options_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >*
CeresScanMatcherOptions3D::mutable_intensity_cost_function_options() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return &intensity_cost_function_options_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >&
CeresScanMatcherOptions3D::intensity_cost_function_options() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return intensity_cost_function_options_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto__INCLUDED
