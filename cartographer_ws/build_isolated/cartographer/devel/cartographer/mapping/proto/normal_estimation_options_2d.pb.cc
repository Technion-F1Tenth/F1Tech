// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/normal_estimation_options_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/normal_estimation_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* NormalEstimationOptions2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalEstimationOptions2D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/normal_estimation_options_2d.proto");
  GOOGLE_CHECK(file != NULL);
  NormalEstimationOptions2D_descriptor_ = file->message_type(0);
  static const int NormalEstimationOptions2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalEstimationOptions2D, num_normal_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalEstimationOptions2D, sample_radius_),
  };
  NormalEstimationOptions2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NormalEstimationOptions2D_descriptor_,
      NormalEstimationOptions2D::default_instance_,
      NormalEstimationOptions2D_offsets_,
      -1,
      -1,
      -1,
      sizeof(NormalEstimationOptions2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalEstimationOptions2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalEstimationOptions2D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NormalEstimationOptions2D_descriptor_, &NormalEstimationOptions2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto() {
  delete NormalEstimationOptions2D::default_instance_;
  delete NormalEstimationOptions2D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n=cartographer/mapping/proto/normal_esti"
    "mation_options_2d.proto\022\032cartographer.ma"
    "pping.proto\"N\n\031NormalEstimationOptions2D"
    "\022\032\n\022num_normal_samples\030\001 \001(\005\022\025\n\rsample_r"
    "adius\030\002 \001(\002b\006proto3", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/normal_estimation_options_2d.proto", &protobuf_RegisterTypes);
  NormalEstimationOptions2D::default_instance_ = new NormalEstimationOptions2D();
  NormalEstimationOptions2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalEstimationOptions2D::kNumNormalSamplesFieldNumber;
const int NormalEstimationOptions2D::kSampleRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalEstimationOptions2D::NormalEstimationOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.NormalEstimationOptions2D)
}

void NormalEstimationOptions2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NormalEstimationOptions2D::NormalEstimationOptions2D(const NormalEstimationOptions2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.NormalEstimationOptions2D)
}

void NormalEstimationOptions2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_normal_samples_ = 0;
  sample_radius_ = 0;
}

NormalEstimationOptions2D::~NormalEstimationOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.NormalEstimationOptions2D)
  SharedDtor();
}

void NormalEstimationOptions2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalEstimationOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalEstimationOptions2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalEstimationOptions2D_descriptor_;
}

const NormalEstimationOptions2D& NormalEstimationOptions2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
  return *default_instance_;
}

NormalEstimationOptions2D* NormalEstimationOptions2D::default_instance_ = NULL;

NormalEstimationOptions2D* NormalEstimationOptions2D::New(::google::protobuf::Arena* arena) const {
  NormalEstimationOptions2D* n = new NormalEstimationOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalEstimationOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.NormalEstimationOptions2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NormalEstimationOptions2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NormalEstimationOptions2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_normal_samples_, sample_radius_);

#undef ZR_HELPER_
#undef ZR_

}

bool NormalEstimationOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_normal_samples = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_normal_samples_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_sample_radius;
        break;
      }

      // optional float sample_radius = 2;
      case 2: {
        if (tag == 21) {
         parse_sample_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sample_radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.NormalEstimationOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.NormalEstimationOptions2D)
  return false;
#undef DO_
}

void NormalEstimationOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  // optional int32 num_normal_samples = 1;
  if (this->num_normal_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_normal_samples(), output);
  }

  // optional float sample_radius = 2;
  if (this->sample_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sample_radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.NormalEstimationOptions2D)
}

::google::protobuf::uint8* NormalEstimationOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  // optional int32 num_normal_samples = 1;
  if (this->num_normal_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_normal_samples(), target);
  }

  // optional float sample_radius = 2;
  if (this->sample_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sample_radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.NormalEstimationOptions2D)
  return target;
}

int NormalEstimationOptions2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  int total_size = 0;

  // optional int32 num_normal_samples = 1;
  if (this->num_normal_samples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_normal_samples());
  }

  // optional float sample_radius = 2;
  if (this->sample_radius() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalEstimationOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NormalEstimationOptions2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalEstimationOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.NormalEstimationOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.NormalEstimationOptions2D)
    MergeFrom(*source);
  }
}

void NormalEstimationOptions2D::MergeFrom(const NormalEstimationOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_normal_samples() != 0) {
    set_num_normal_samples(from.num_normal_samples());
  }
  if (from.sample_radius() != 0) {
    set_sample_radius(from.sample_radius());
  }
}

void NormalEstimationOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalEstimationOptions2D::CopyFrom(const NormalEstimationOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.NormalEstimationOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalEstimationOptions2D::IsInitialized() const {

  return true;
}

void NormalEstimationOptions2D::Swap(NormalEstimationOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalEstimationOptions2D::InternalSwap(NormalEstimationOptions2D* other) {
  std::swap(num_normal_samples_, other->num_normal_samples_);
  std::swap(sample_radius_, other->sample_radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalEstimationOptions2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalEstimationOptions2D_descriptor_;
  metadata.reflection = NormalEstimationOptions2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalEstimationOptions2D

// optional int32 num_normal_samples = 1;
void NormalEstimationOptions2D::clear_num_normal_samples() {
  num_normal_samples_ = 0;
}
 ::google::protobuf::int32 NormalEstimationOptions2D::num_normal_samples() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NormalEstimationOptions2D.num_normal_samples)
  return num_normal_samples_;
}
 void NormalEstimationOptions2D::set_num_normal_samples(::google::protobuf::int32 value) {
  
  num_normal_samples_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NormalEstimationOptions2D.num_normal_samples)
}

// optional float sample_radius = 2;
void NormalEstimationOptions2D::clear_sample_radius() {
  sample_radius_ = 0;
}
 float NormalEstimationOptions2D::sample_radius() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NormalEstimationOptions2D.sample_radius)
  return sample_radius_;
}
 void NormalEstimationOptions2D::set_sample_radius(float value) {
  
  sample_radius_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NormalEstimationOptions2D.sample_radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
