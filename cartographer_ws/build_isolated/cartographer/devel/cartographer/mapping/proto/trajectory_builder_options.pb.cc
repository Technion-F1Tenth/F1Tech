// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* InitialTrajectoryPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitialTrajectoryPose_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBuilderOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorId_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SensorId_SensorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBuilderOptionsWithSensorIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBuilderOptionsWithSensorIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllTrajectoryBuilderOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTrajectoryBuilderOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/trajectory_builder_options.proto");
  GOOGLE_CHECK(file != NULL);
  InitialTrajectoryPose_descriptor_ = file->message_type(0);
  static const int InitialTrajectoryPose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, relative_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, to_trajectory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, timestamp_),
  };
  InitialTrajectoryPose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitialTrajectoryPose_descriptor_,
      InitialTrajectoryPose::default_instance_,
      InitialTrajectoryPose_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitialTrajectoryPose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, _is_default_instance_));
  TrajectoryBuilderOptions_descriptor_ = file->message_type(1);
  static const int TrajectoryBuilderOptions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_2d_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_3d_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, initial_trajectory_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pure_localization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pure_localization_trimmer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, collate_fixed_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, collate_landmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pose_graph_odometry_motion_filter_),
  };
  TrajectoryBuilderOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryBuilderOptions_descriptor_,
      TrajectoryBuilderOptions::default_instance_,
      TrajectoryBuilderOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrajectoryBuilderOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, _is_default_instance_));
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_descriptor_ = TrajectoryBuilderOptions_descriptor_->nested_type(0);
  static const int TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, max_submaps_to_keep_),
  };
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_descriptor_,
      TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance_,
      TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, _is_default_instance_));
  SensorId_descriptor_ = file->message_type(2);
  static const int SensorId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, id_),
  };
  SensorId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SensorId_descriptor_,
      SensorId::default_instance_,
      SensorId_offsets_,
      -1,
      -1,
      -1,
      sizeof(SensorId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, _is_default_instance_));
  SensorId_SensorType_descriptor_ = SensorId_descriptor_->enum_type(0);
  TrajectoryBuilderOptionsWithSensorIds_descriptor_ = file->message_type(3);
  static const int TrajectoryBuilderOptionsWithSensorIds_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, sensor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, trajectory_builder_options_),
  };
  TrajectoryBuilderOptionsWithSensorIds_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrajectoryBuilderOptionsWithSensorIds_descriptor_,
      TrajectoryBuilderOptionsWithSensorIds::default_instance_,
      TrajectoryBuilderOptionsWithSensorIds_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrajectoryBuilderOptionsWithSensorIds),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, _is_default_instance_));
  AllTrajectoryBuilderOptions_descriptor_ = file->message_type(4);
  static const int AllTrajectoryBuilderOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTrajectoryBuilderOptions, options_with_sensor_ids_),
  };
  AllTrajectoryBuilderOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllTrajectoryBuilderOptions_descriptor_,
      AllTrajectoryBuilderOptions::default_instance_,
      AllTrajectoryBuilderOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllTrajectoryBuilderOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTrajectoryBuilderOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTrajectoryBuilderOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitialTrajectoryPose_descriptor_, &InitialTrajectoryPose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryBuilderOptions_descriptor_, &TrajectoryBuilderOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_descriptor_, &TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SensorId_descriptor_, &SensorId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrajectoryBuilderOptionsWithSensorIds_descriptor_, &TrajectoryBuilderOptionsWithSensorIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllTrajectoryBuilderOptions_descriptor_, &AllTrajectoryBuilderOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  delete InitialTrajectoryPose::default_instance_;
  delete InitialTrajectoryPose_reflection_;
  delete TrajectoryBuilderOptions::default_instance_;
  delete TrajectoryBuilderOptions_reflection_;
  delete TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance_;
  delete TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_reflection_;
  delete SensorId::default_instance_;
  delete SensorId_reflection_;
  delete TrajectoryBuilderOptionsWithSensorIds::default_instance_;
  delete TrajectoryBuilderOptionsWithSensorIds_reflection_;
  delete AllTrajectoryBuilderOptions::default_instance_;
  delete AllTrajectoryBuilderOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto();
  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n;cartographer/mapping/proto/trajectory_"
    "builder_options.proto\022\032cartographer.mapp"
    "ing.proto\032,cartographer/transform/proto/"
    "transform.proto\0326cartographer/mapping/pr"
    "oto/motion_filter_options.proto\032Dcartogr"
    "apher/mapping/proto/local_trajectory_bui"
    "lder_options_2d.proto\032Dcartographer/mapp"
    "ing/proto/local_trajectory_builder_optio"
    "ns_3d.proto\"\202\001\n\025InitialTrajectoryPose\022<\n"
    "\rrelative_pose\030\001 \001(\0132%.cartographer.tran"
    "sform.proto.Rigid3d\022\030\n\020to_trajectory_id\030"
    "\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003\"\246\005\n\030TrajectoryB"
    "uilderOptions\022b\n\035trajectory_builder_2d_o"
    "ptions\030\001 \001(\0132;.cartographer.mapping.prot"
    "o.LocalTrajectoryBuilderOptions2D\022b\n\035tra"
    "jectory_builder_3d_options\030\002 \001(\0132;.carto"
    "grapher.mapping.proto.LocalTrajectoryBui"
    "lderOptions3D\022R\n\027initial_trajectory_pose"
    "\030\004 \001(\01321.cartographer.mapping.proto.Init"
    "ialTrajectoryPose\022\035\n\021pure_localization\030\003"
    " \001(\010B\002\030\001\022v\n\031pure_localization_trimmer\030\006 "
    "\001(\0132S.cartographer.mapping.proto.Traject"
    "oryBuilderOptions.PureLocalizationTrimme"
    "rOptions\022\033\n\023collate_fixed_frame\030\007 \001(\010\022\031\n"
    "\021collate_landmarks\030\010 \001(\010\022Z\n!pose_graph_o"
    "dometry_motion_filter\030\t \001(\0132/.cartograph"
    "er.mapping.proto.MotionFilterOptions\032=\n\036"
    "PureLocalizationTrimmerOptions\022\033\n\023max_su"
    "bmaps_to_keep\030\001 \001(\005J\004\010\005\020\006\"\300\001\n\010SensorId\022="
    "\n\004type\030\001 \001(\0162/.cartographer.mapping.prot"
    "o.SensorId.SensorType\022\n\n\002id\030\002 \001(\t\"i\n\nSen"
    "sorType\022\t\n\005RANGE\020\000\022\007\n\003IMU\020\001\022\014\n\010ODOMETRY\020"
    "\002\022\024\n\020FIXED_FRAME_POSE\020\003\022\014\n\010LANDMARK\020\004\022\025\n"
    "\021LOCAL_SLAM_RESULT\020\005\"\272\001\n%TrajectoryBuild"
    "erOptionsWithSensorIds\0227\n\tsensor_id\030\001 \003("
    "\0132$.cartographer.mapping.proto.SensorId\022"
    "X\n\032trajectory_builder_options\030\002 \001(\01324.ca"
    "rtographer.mapping.proto.TrajectoryBuild"
    "erOptions\"\201\001\n\033AllTrajectoryBuilderOption"
    "s\022b\n\027options_with_sensor_ids\030\001 \003(\0132A.car"
    "tographer.mapping.proto.TrajectoryBuilde"
    "rOptionsWithSensorIdsb\006proto3", 1669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_builder_options.proto", &protobuf_RegisterTypes);
  InitialTrajectoryPose::default_instance_ = new InitialTrajectoryPose();
  TrajectoryBuilderOptions::default_instance_ = new TrajectoryBuilderOptions();
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance_ = new TrajectoryBuilderOptions_PureLocalizationTrimmerOptions();
  SensorId::default_instance_ = new SensorId();
  TrajectoryBuilderOptionsWithSensorIds::default_instance_ = new TrajectoryBuilderOptionsWithSensorIds();
  AllTrajectoryBuilderOptions::default_instance_ = new AllTrajectoryBuilderOptions();
  InitialTrajectoryPose::default_instance_->InitAsDefaultInstance();
  TrajectoryBuilderOptions::default_instance_->InitAsDefaultInstance();
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance_->InitAsDefaultInstance();
  SensorId::default_instance_->InitAsDefaultInstance();
  TrajectoryBuilderOptionsWithSensorIds::default_instance_->InitAsDefaultInstance();
  AllTrajectoryBuilderOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitialTrajectoryPose::kRelativePoseFieldNumber;
const int InitialTrajectoryPose::kToTrajectoryIdFieldNumber;
const int InitialTrajectoryPose::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitialTrajectoryPose::InitialTrajectoryPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}

void InitialTrajectoryPose::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  relative_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

InitialTrajectoryPose::InitialTrajectoryPose(const InitialTrajectoryPose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}

void InitialTrajectoryPose::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  relative_pose_ = NULL;
  to_trajectory_id_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

InitialTrajectoryPose::~InitialTrajectoryPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.InitialTrajectoryPose)
  SharedDtor();
}

void InitialTrajectoryPose::SharedDtor() {
  if (this != default_instance_) {
    delete relative_pose_;
  }
}

void InitialTrajectoryPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialTrajectoryPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitialTrajectoryPose_descriptor_;
}

const InitialTrajectoryPose& InitialTrajectoryPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

InitialTrajectoryPose* InitialTrajectoryPose::default_instance_ = NULL;

InitialTrajectoryPose* InitialTrajectoryPose::New(::google::protobuf::Arena* arena) const {
  InitialTrajectoryPose* n = new InitialTrajectoryPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitialTrajectoryPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.InitialTrajectoryPose)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InitialTrajectoryPose, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InitialTrajectoryPose*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, to_trajectory_id_);
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool InitialTrajectoryPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.InitialTrajectoryPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_trajectory_id;
        break;
      }

      // optional int32 to_trajectory_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_trajectory_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_trajectory_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.InitialTrajectoryPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.InitialTrajectoryPose)
  return false;
#undef DO_
}

void InitialTrajectoryPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.InitialTrajectoryPose)
  // optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->relative_pose_, output);
  }

  // optional int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_trajectory_id(), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.InitialTrajectoryPose)
}

::google::protobuf::uint8* InitialTrajectoryPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.InitialTrajectoryPose)
  // optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->relative_pose_, false, target);
  }

  // optional int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_trajectory_id(), target);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.InitialTrajectoryPose)
  return target;
}

int InitialTrajectoryPose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.InitialTrajectoryPose)
  int total_size = 0;

  // optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relative_pose_);
  }

  // optional int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_trajectory_id());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialTrajectoryPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitialTrajectoryPose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitialTrajectoryPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.InitialTrajectoryPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.InitialTrajectoryPose)
    MergeFrom(*source);
  }
}

void InitialTrajectoryPose::MergeFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_relative_pose()) {
    mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
  }
  if (from.to_trajectory_id() != 0) {
    set_to_trajectory_id(from.to_trajectory_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void InitialTrajectoryPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialTrajectoryPose::CopyFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialTrajectoryPose::IsInitialized() const {

  return true;
}

void InitialTrajectoryPose::Swap(InitialTrajectoryPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitialTrajectoryPose::InternalSwap(InitialTrajectoryPose* other) {
  std::swap(relative_pose_, other->relative_pose_);
  std::swap(to_trajectory_id_, other->to_trajectory_id_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitialTrajectoryPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitialTrajectoryPose_descriptor_;
  metadata.reflection = InitialTrajectoryPose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitialTrajectoryPose

// optional .cartographer.transform.proto.Rigid3d relative_pose = 1;
bool InitialTrajectoryPose::has_relative_pose() const {
  return !_is_default_instance_ && relative_pose_ != NULL;
}
void InitialTrajectoryPose::clear_relative_pose() {
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& InitialTrajectoryPose::relative_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return relative_pose_ != NULL ? *relative_pose_ : *default_instance_->relative_pose_;
}
::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::mutable_relative_pose() {
  
  if (relative_pose_ == NULL) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return relative_pose_;
}
::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = NULL;
  return temp;
}
void InitialTrajectoryPose::set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose) {
  delete relative_pose_;
  relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
}

// optional int32 to_trajectory_id = 2;
void InitialTrajectoryPose::clear_to_trajectory_id() {
  to_trajectory_id_ = 0;
}
 ::google::protobuf::int32 InitialTrajectoryPose::to_trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
  return to_trajectory_id_;
}
 void InitialTrajectoryPose::set_to_trajectory_id(::google::protobuf::int32 value) {
  
  to_trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
}

// optional int64 timestamp = 3;
void InitialTrajectoryPose::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 InitialTrajectoryPose::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
  return timestamp_;
}
 void InitialTrajectoryPose::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::kMaxSubmapsToKeepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_submaps_to_keep_ = 0;
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::~TrajectoryBuilderOptions_PureLocalizationTrimmerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_descriptor_;
}

const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance_ = NULL;

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* n = new TrajectoryBuilderOptions_PureLocalizationTrimmerOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  max_submaps_to_keep_ = 0;
}

bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_submaps_to_keep = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_submaps_to_keep_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return false;
#undef DO_
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  // optional int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_submaps_to_keep(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  // optional int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_submaps_to_keep(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return target;
}

int TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  int total_size = 0;

  // optional int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_submaps_to_keep());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.max_submaps_to_keep() != 0) {
    set_max_submaps_to_keep(from.max_submaps_to_keep());
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::IsInitialized() const {

  return true;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Swap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSwap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  std::swap(max_submaps_to_keep_, other->max_submaps_to_keep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_descriptor_;
  metadata.reflection = TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions::kTrajectoryBuilder2DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kTrajectoryBuilder3DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kInitialTrajectoryPoseFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationTrimmerFieldNumber;
const int TrajectoryBuilderOptions::kCollateFixedFrameFieldNumber;
const int TrajectoryBuilderOptions::kCollateLandmarksFieldNumber;
const int TrajectoryBuilderOptions::kPoseGraphOdometryMotionFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions::TrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  trajectory_builder_2d_options_ = const_cast< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D*>(&::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::default_instance());
  trajectory_builder_3d_options_ = const_cast< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D*>(&::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::default_instance());
  initial_trajectory_pose_ = const_cast< ::cartographer::mapping::proto::InitialTrajectoryPose*>(&::cartographer::mapping::proto::InitialTrajectoryPose::default_instance());
  pure_localization_trimmer_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(&::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance());
  pose_graph_odometry_motion_filter_ = const_cast< ::cartographer::mapping::proto::MotionFilterOptions*>(&::cartographer::mapping::proto::MotionFilterOptions::default_instance());
}

TrajectoryBuilderOptions::TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_builder_2d_options_ = NULL;
  trajectory_builder_3d_options_ = NULL;
  initial_trajectory_pose_ = NULL;
  pure_localization_ = false;
  pure_localization_trimmer_ = NULL;
  collate_fixed_frame_ = false;
  collate_landmarks_ = false;
  pose_graph_odometry_motion_filter_ = NULL;
}

TrajectoryBuilderOptions::~TrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
    delete trajectory_builder_2d_options_;
    delete trajectory_builder_3d_options_;
    delete initial_trajectory_pose_;
    delete pure_localization_trimmer_;
    delete pose_graph_odometry_motion_filter_;
  }
}

void TrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBuilderOptions_descriptor_;
}

const TrajectoryBuilderOptions& TrajectoryBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

TrajectoryBuilderOptions* TrajectoryBuilderOptions::default_instance_ = NULL;

TrajectoryBuilderOptions* TrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptions* n = new TrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrajectoryBuilderOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrajectoryBuilderOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pure_localization_, collate_landmarks_);
  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) delete initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && pure_localization_trimmer_ != NULL) delete pure_localization_trimmer_;
  pure_localization_trimmer_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_graph_odometry_motion_filter_ != NULL) delete pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_2d_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trajectory_builder_3d_options;
        break;
      }

      // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
      case 2: {
        if (tag == 18) {
         parse_trajectory_builder_3d_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_3d_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pure_localization;
        break;
      }

      // optional bool pure_localization = 3 [deprecated = true];
      case 3: {
        if (tag == 24) {
         parse_pure_localization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pure_localization_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_initial_trajectory_pose;
        break;
      }

      // optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
      case 4: {
        if (tag == 34) {
         parse_initial_trajectory_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_trajectory_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pure_localization_trimmer;
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
      case 6: {
        if (tag == 50) {
         parse_pure_localization_trimmer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pure_localization_trimmer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_collate_fixed_frame;
        break;
      }

      // optional bool collate_fixed_frame = 7;
      case 7: {
        if (tag == 56) {
         parse_collate_fixed_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_fixed_frame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_collate_landmarks;
        break;
      }

      // optional bool collate_landmarks = 8;
      case 8: {
        if (tag == 64) {
         parse_collate_landmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_landmarks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_pose_graph_odometry_motion_filter;
        break;
      }

      // optional .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
      case 9: {
        if (tag == 74) {
         parse_pose_graph_odometry_motion_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_graph_odometry_motion_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return false;
#undef DO_
}

void TrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trajectory_builder_2d_options_, output);
  }

  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_builder_3d_options_, output);
  }

  // optional bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pure_localization(), output);
  }

  // optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->initial_trajectory_pose_, output);
  }

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pure_localization_trimmer_, output);
  }

  // optional bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->collate_fixed_frame(), output);
  }

  // optional bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->collate_landmarks(), output);
  }

  // optional .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
  if (this->has_pose_graph_odometry_motion_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->pose_graph_odometry_motion_filter_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trajectory_builder_2d_options_, false, target);
  }

  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_builder_3d_options_, false, target);
  }

  // optional bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pure_localization(), target);
  }

  // optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->initial_trajectory_pose_, false, target);
  }

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pure_localization_trimmer_, false, target);
  }

  // optional bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->collate_fixed_frame(), target);
  }

  // optional bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->collate_landmarks(), target);
  }

  // optional .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
  if (this->has_pose_graph_odometry_motion_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->pose_graph_odometry_motion_filter_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return target;
}

int TrajectoryBuilderOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  int total_size = 0;

  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_2d_options_);
  }

  // optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_3d_options_);
  }

  // optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_trajectory_pose_);
  }

  // optional bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pure_localization_trimmer_);
  }

  // optional bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    total_size += 1 + 1;
  }

  // optional bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
  if (this->has_pose_graph_odometry_motion_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_graph_odometry_motion_filter_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryBuilderOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions::MergeFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_trajectory_builder_2d_options()) {
    mutable_trajectory_builder_2d_options()->::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::MergeFrom(from.trajectory_builder_2d_options());
  }
  if (from.has_trajectory_builder_3d_options()) {
    mutable_trajectory_builder_3d_options()->::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::MergeFrom(from.trajectory_builder_3d_options());
  }
  if (from.has_initial_trajectory_pose()) {
    mutable_initial_trajectory_pose()->::cartographer::mapping::proto::InitialTrajectoryPose::MergeFrom(from.initial_trajectory_pose());
  }
  if (from.pure_localization() != 0) {
    set_pure_localization(from.pure_localization());
  }
  if (from.has_pure_localization_trimmer()) {
    mutable_pure_localization_trimmer()->::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(from.pure_localization_trimmer());
  }
  if (from.collate_fixed_frame() != 0) {
    set_collate_fixed_frame(from.collate_fixed_frame());
  }
  if (from.collate_landmarks() != 0) {
    set_collate_landmarks(from.collate_landmarks());
  }
  if (from.has_pose_graph_odometry_motion_filter()) {
    mutable_pose_graph_odometry_motion_filter()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(from.pose_graph_odometry_motion_filter());
  }
}

void TrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions::CopyFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions::IsInitialized() const {

  return true;
}

void TrajectoryBuilderOptions::Swap(TrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions::InternalSwap(TrajectoryBuilderOptions* other) {
  std::swap(trajectory_builder_2d_options_, other->trajectory_builder_2d_options_);
  std::swap(trajectory_builder_3d_options_, other->trajectory_builder_3d_options_);
  std::swap(initial_trajectory_pose_, other->initial_trajectory_pose_);
  std::swap(pure_localization_, other->pure_localization_);
  std::swap(pure_localization_trimmer_, other->pure_localization_trimmer_);
  std::swap(collate_fixed_frame_, other->collate_fixed_frame_);
  std::swap(collate_landmarks_, other->collate_landmarks_);
  std::swap(pose_graph_odometry_motion_filter_, other->pose_graph_odometry_motion_filter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBuilderOptions_descriptor_;
  metadata.reflection = TrajectoryBuilderOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptions_PureLocalizationTrimmerOptions

// optional int32 max_submaps_to_keep = 1;
void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::clear_max_submaps_to_keep() {
  max_submaps_to_keep_ = 0;
}
 ::google::protobuf::int32 TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::max_submaps_to_keep() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions.max_submaps_to_keep)
  return max_submaps_to_keep_;
}
 void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::set_max_submaps_to_keep(::google::protobuf::int32 value) {
  
  max_submaps_to_keep_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions.max_submaps_to_keep)
}

// -------------------------------------------------------------------

// TrajectoryBuilderOptions

// optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options() const {
  return !_is_default_instance_ && trajectory_builder_2d_options_ != NULL;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
}
const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& TrajectoryBuilderOptions::trajectory_builder_2d_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_ != NULL ? *trajectory_builder_2d_options_ : *default_instance_->trajectory_builder_2d_options_;
}
::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options() {
  
  if (trajectory_builder_2d_options_ == NULL) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_;
}
::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::release_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* temp = trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options) {
  delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = trajectory_builder_2d_options;
  if (trajectory_builder_2d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
}

// optional .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options() const {
  return !_is_default_instance_ && trajectory_builder_3d_options_ != NULL;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
}
const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& TrajectoryBuilderOptions::trajectory_builder_3d_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_ != NULL ? *trajectory_builder_3d_options_ : *default_instance_->trajectory_builder_3d_options_;
}
::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options() {
  
  if (trajectory_builder_3d_options_ == NULL) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_;
}
::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::release_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* temp = trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options) {
  delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = trajectory_builder_3d_options;
  if (trajectory_builder_3d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
}

// optional .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
bool TrajectoryBuilderOptions::has_initial_trajectory_pose() const {
  return !_is_default_instance_ && initial_trajectory_pose_ != NULL;
}
void TrajectoryBuilderOptions::clear_initial_trajectory_pose() {
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) delete initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
}
const ::cartographer::mapping::proto::InitialTrajectoryPose& TrajectoryBuilderOptions::initial_trajectory_pose() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return initial_trajectory_pose_ != NULL ? *initial_trajectory_pose_ : *default_instance_->initial_trajectory_pose_;
}
::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::mutable_initial_trajectory_pose() {
  
  if (initial_trajectory_pose_ == NULL) {
    initial_trajectory_pose_ = new ::cartographer::mapping::proto::InitialTrajectoryPose;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return initial_trajectory_pose_;
}
::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::release_initial_trajectory_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  
  ::cartographer::mapping::proto::InitialTrajectoryPose* temp = initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_initial_trajectory_pose(::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose) {
  delete initial_trajectory_pose_;
  initial_trajectory_pose_ = initial_trajectory_pose;
  if (initial_trajectory_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
}

// optional bool pure_localization = 3 [deprecated = true];
void TrajectoryBuilderOptions::clear_pure_localization() {
  pure_localization_ = false;
}
 bool TrajectoryBuilderOptions::pure_localization() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
  return pure_localization_;
}
 void TrajectoryBuilderOptions::set_pure_localization(bool value) {
  
  pure_localization_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
}

// optional .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
bool TrajectoryBuilderOptions::has_pure_localization_trimmer() const {
  return !_is_default_instance_ && pure_localization_trimmer_ != NULL;
}
void TrajectoryBuilderOptions::clear_pure_localization_trimmer() {
  if (GetArenaNoVirtual() == NULL && pure_localization_trimmer_ != NULL) delete pure_localization_trimmer_;
  pure_localization_trimmer_ = NULL;
}
const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions::pure_localization_trimmer() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  return pure_localization_trimmer_ != NULL ? *pure_localization_trimmer_ : *default_instance_->pure_localization_trimmer_;
}
::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::mutable_pure_localization_trimmer() {
  
  if (pure_localization_trimmer_ == NULL) {
    pure_localization_trimmer_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  return pure_localization_trimmer_;
}
::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::release_pure_localization_trimmer() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* temp = pure_localization_trimmer_;
  pure_localization_trimmer_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_pure_localization_trimmer(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* pure_localization_trimmer) {
  delete pure_localization_trimmer_;
  pure_localization_trimmer_ = pure_localization_trimmer;
  if (pure_localization_trimmer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
}

// optional bool collate_fixed_frame = 7;
void TrajectoryBuilderOptions::clear_collate_fixed_frame() {
  collate_fixed_frame_ = false;
}
 bool TrajectoryBuilderOptions::collate_fixed_frame() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_fixed_frame)
  return collate_fixed_frame_;
}
 void TrajectoryBuilderOptions::set_collate_fixed_frame(bool value) {
  
  collate_fixed_frame_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_fixed_frame)
}

// optional bool collate_landmarks = 8;
void TrajectoryBuilderOptions::clear_collate_landmarks() {
  collate_landmarks_ = false;
}
 bool TrajectoryBuilderOptions::collate_landmarks() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_landmarks)
  return collate_landmarks_;
}
 void TrajectoryBuilderOptions::set_collate_landmarks(bool value) {
  
  collate_landmarks_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_landmarks)
}

// optional .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
bool TrajectoryBuilderOptions::has_pose_graph_odometry_motion_filter() const {
  return !_is_default_instance_ && pose_graph_odometry_motion_filter_ != NULL;
}
void TrajectoryBuilderOptions::clear_pose_graph_odometry_motion_filter() {
  if (GetArenaNoVirtual() == NULL && pose_graph_odometry_motion_filter_ != NULL) delete pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = NULL;
}
const ::cartographer::mapping::proto::MotionFilterOptions& TrajectoryBuilderOptions::pose_graph_odometry_motion_filter() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
  return pose_graph_odometry_motion_filter_ != NULL ? *pose_graph_odometry_motion_filter_ : *default_instance_->pose_graph_odometry_motion_filter_;
}
::cartographer::mapping::proto::MotionFilterOptions* TrajectoryBuilderOptions::mutable_pose_graph_odometry_motion_filter() {
  
  if (pose_graph_odometry_motion_filter_ == NULL) {
    pose_graph_odometry_motion_filter_ = new ::cartographer::mapping::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
  return pose_graph_odometry_motion_filter_;
}
::cartographer::mapping::proto::MotionFilterOptions* TrajectoryBuilderOptions::release_pose_graph_odometry_motion_filter() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
  
  ::cartographer::mapping::proto::MotionFilterOptions* temp = pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_pose_graph_odometry_motion_filter(::cartographer::mapping::proto::MotionFilterOptions* pose_graph_odometry_motion_filter) {
  delete pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = pose_graph_odometry_motion_filter;
  if (pose_graph_odometry_motion_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SensorId_SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorId_SensorType_descriptor_;
}
bool SensorId_SensorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorId_SensorType SensorId::RANGE;
const SensorId_SensorType SensorId::IMU;
const SensorId_SensorType SensorId::ODOMETRY;
const SensorId_SensorType SensorId::FIXED_FRAME_POSE;
const SensorId_SensorType SensorId::LANDMARK;
const SensorId_SensorType SensorId::LOCAL_SLAM_RESULT;
const SensorId_SensorType SensorId::SensorType_MIN;
const SensorId_SensorType SensorId::SensorType_MAX;
const int SensorId::SensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorId::kTypeFieldNumber;
const int SensorId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorId::SensorId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SensorId)
}

void SensorId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SensorId::SensorId(const SensorId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SensorId)
}

void SensorId::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SensorId::~SensorId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SensorId)
  SharedDtor();
}

void SensorId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SensorId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorId_descriptor_;
}

const SensorId& SensorId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

SensorId* SensorId::default_instance_ = NULL;

SensorId* SensorId::New(::google::protobuf::Arena* arena) const {
  SensorId* n = new SensorId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SensorId)
  type_ = 0;
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SensorId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SensorId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cartographer::mapping::proto::SensorId_SensorType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.SensorId.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SensorId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SensorId)
  return false;
#undef DO_
}

void SensorId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SensorId)
  // optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SensorId)
}

::google::protobuf::uint8* SensorId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SensorId)
  // optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SensorId)
  return target;
}

int SensorId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SensorId)
  int total_size = 0;

  // optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SensorId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SensorId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SensorId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SensorId)
    MergeFrom(*source);
  }
}

void SensorId::MergeFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SensorId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void SensorId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorId::CopyFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorId::IsInitialized() const {

  return true;
}

void SensorId::Swap(SensorId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorId::InternalSwap(SensorId* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorId_descriptor_;
  metadata.reflection = SensorId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorId

// optional .cartographer.mapping.proto.SensorId.SensorType type = 1;
void SensorId::clear_type() {
  type_ = 0;
}
 ::cartographer::mapping::proto::SensorId_SensorType SensorId::type() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.type)
  return static_cast< ::cartographer::mapping::proto::SensorId_SensorType >(type_);
}
 void SensorId::set_type(::cartographer::mapping::proto::SensorId_SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.type)
}

// optional string id = 2;
void SensorId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SensorId::id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.id)
}
 void SensorId::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SensorId.id)
}
 void SensorId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SensorId.id)
}
 ::std::string* SensorId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SensorId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SensorId::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SensorId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SensorId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SensorId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptionsWithSensorIds::kSensorIdFieldNumber;
const int TrajectoryBuilderOptionsWithSensorIds::kTrajectoryBuilderOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

void TrajectoryBuilderOptionsWithSensorIds::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions*>(&::cartographer::mapping::proto::TrajectoryBuilderOptions::default_instance());
}

TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds(const TrajectoryBuilderOptionsWithSensorIds& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

void TrajectoryBuilderOptionsWithSensorIds::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trajectory_builder_options_ = NULL;
}

TrajectoryBuilderOptionsWithSensorIds::~TrajectoryBuilderOptionsWithSensorIds() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  SharedDtor();
}

void TrajectoryBuilderOptionsWithSensorIds::SharedDtor() {
  if (this != default_instance_) {
    delete trajectory_builder_options_;
  }
}

void TrajectoryBuilderOptionsWithSensorIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptionsWithSensorIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBuilderOptionsWithSensorIds_descriptor_;
}

const TrajectoryBuilderOptionsWithSensorIds& TrajectoryBuilderOptionsWithSensorIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

TrajectoryBuilderOptionsWithSensorIds* TrajectoryBuilderOptionsWithSensorIds::default_instance_ = NULL;

TrajectoryBuilderOptionsWithSensorIds* TrajectoryBuilderOptionsWithSensorIds::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptionsWithSensorIds* n = new TrajectoryBuilderOptionsWithSensorIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptionsWithSensorIds::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) delete trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
  sensor_id_.Clear();
}

bool TrajectoryBuilderOptionsWithSensorIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sensor_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_trajectory_builder_options;
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2: {
        if (tag == 18) {
         parse_trajectory_builder_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return false;
#undef DO_
}

void TrajectoryBuilderOptionsWithSensorIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0, n = this->sensor_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensor_id(i), output);
  }

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_builder_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

::google::protobuf::uint8* TrajectoryBuilderOptionsWithSensorIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0, n = this->sensor_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sensor_id(i), false, target);
  }

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_builder_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return target;
}

int TrajectoryBuilderOptionsWithSensorIds::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  int total_size = 0;

  // optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_options_);
  }

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  total_size += 1 * this->sensor_id_size();
  for (int i = 0; i < this->sensor_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensor_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrajectoryBuilderOptionsWithSensorIds* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptionsWithSensorIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_trajectory_builder_options()) {
    mutable_trajectory_builder_options()->::cartographer::mapping::proto::TrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_options());
  }
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptionsWithSensorIds::IsInitialized() const {

  return true;
}

void TrajectoryBuilderOptionsWithSensorIds::Swap(TrajectoryBuilderOptionsWithSensorIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptionsWithSensorIds::InternalSwap(TrajectoryBuilderOptionsWithSensorIds* other) {
  sensor_id_.UnsafeArenaSwap(&other->sensor_id_);
  std::swap(trajectory_builder_options_, other->trajectory_builder_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptionsWithSensorIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBuilderOptionsWithSensorIds_descriptor_;
  metadata.reflection = TrajectoryBuilderOptionsWithSensorIds_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptionsWithSensorIds

// repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
int TrajectoryBuilderOptionsWithSensorIds::sensor_id_size() const {
  return sensor_id_.size();
}
void TrajectoryBuilderOptionsWithSensorIds::clear_sensor_id() {
  sensor_id_.Clear();
}
const ::cartographer::mapping::proto::SensorId& TrajectoryBuilderOptionsWithSensorIds::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Get(index);
}
::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Mutable(index);
}
::cartographer::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::add_sensor_id() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >*
TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return &sensor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SensorId >&
TrajectoryBuilderOptionsWithSensorIds::sensor_id() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_;
}

// optional .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
bool TrajectoryBuilderOptionsWithSensorIds::has_trajectory_builder_options() const {
  return !_is_default_instance_ && trajectory_builder_options_ != NULL;
}
void TrajectoryBuilderOptionsWithSensorIds::clear_trajectory_builder_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) delete trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
}
const ::cartographer::mapping::proto::TrajectoryBuilderOptions& TrajectoryBuilderOptionsWithSensorIds::trajectory_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return trajectory_builder_options_ != NULL ? *trajectory_builder_options_ : *default_instance_->trajectory_builder_options_;
}
::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::mutable_trajectory_builder_options() {
  
  if (trajectory_builder_options_ == NULL) {
    trajectory_builder_options_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return trajectory_builder_options_;
}
::cartographer::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::release_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  
  ::cartographer::mapping::proto::TrajectoryBuilderOptions* temp = trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptionsWithSensorIds::set_allocated_trajectory_builder_options(::cartographer::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options) {
  delete trajectory_builder_options_;
  trajectory_builder_options_ = trajectory_builder_options;
  if (trajectory_builder_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllTrajectoryBuilderOptions::kOptionsWithSensorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

void AllTrajectoryBuilderOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions(const AllTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

void AllTrajectoryBuilderOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AllTrajectoryBuilderOptions::~AllTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  SharedDtor();
}

void AllTrajectoryBuilderOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTrajectoryBuilderOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTrajectoryBuilderOptions_descriptor_;
}

const AllTrajectoryBuilderOptions& AllTrajectoryBuilderOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto();
  return *default_instance_;
}

AllTrajectoryBuilderOptions* AllTrajectoryBuilderOptions::default_instance_ = NULL;

AllTrajectoryBuilderOptions* AllTrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  AllTrajectoryBuilderOptions* n = new AllTrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllTrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  options_with_sensor_ids_.Clear();
}

bool AllTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_options_with_sensor_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_options_with_sensor_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_options_with_sensor_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return false;
#undef DO_
}

void AllTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0, n = this->options_with_sensor_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->options_with_sensor_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

::google::protobuf::uint8* AllTrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0, n = this->options_with_sensor_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->options_with_sensor_ids(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return target;
}

int AllTrajectoryBuilderOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  int total_size = 0;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  total_size += 1 * this->options_with_sensor_ids_size();
  for (int i = 0; i < this->options_with_sensor_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->options_with_sensor_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AllTrajectoryBuilderOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllTrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void AllTrajectoryBuilderOptions::MergeFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  options_with_sensor_ids_.MergeFrom(from.options_with_sensor_ids_);
}

void AllTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTrajectoryBuilderOptions::CopyFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTrajectoryBuilderOptions::IsInitialized() const {

  return true;
}

void AllTrajectoryBuilderOptions::Swap(AllTrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllTrajectoryBuilderOptions::InternalSwap(AllTrajectoryBuilderOptions* other) {
  options_with_sensor_ids_.UnsafeArenaSwap(&other->options_with_sensor_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTrajectoryBuilderOptions_descriptor_;
  metadata.reflection = AllTrajectoryBuilderOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllTrajectoryBuilderOptions

// repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
int AllTrajectoryBuilderOptions::options_with_sensor_ids_size() const {
  return options_with_sensor_ids_.size();
}
void AllTrajectoryBuilderOptions::clear_options_with_sensor_ids() {
  options_with_sensor_ids_.Clear();
}
const ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& AllTrajectoryBuilderOptions::options_with_sensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Get(index);
}
::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Mutable(index);
}
::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::add_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >*
AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return &options_with_sensor_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >&
AllTrajectoryBuilderOptions::options_with_sensor_ids() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
