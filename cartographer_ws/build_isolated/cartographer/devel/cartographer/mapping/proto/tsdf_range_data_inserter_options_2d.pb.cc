// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TSDFRangeDataInserterOptions2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSDFRangeDataInserterOptions2D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.proto");
  GOOGLE_CHECK(file != NULL);
  TSDFRangeDataInserterOptions2D_descriptor_ = file->message_type(0);
  static const int TSDFRangeDataInserterOptions2D_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, truncation_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, maximum_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, update_free_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, normal_estimation_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, project_sdf_distance_to_scan_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, update_weight_range_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, update_weight_angle_scan_normal_to_ray_kernel_bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, update_weight_distance_cell_to_hit_kernel_bandwidth_),
  };
  TSDFRangeDataInserterOptions2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSDFRangeDataInserterOptions2D_descriptor_,
      TSDFRangeDataInserterOptions2D::default_instance_,
      TSDFRangeDataInserterOptions2D_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSDFRangeDataInserterOptions2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDFRangeDataInserterOptions2D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSDFRangeDataInserterOptions2D_descriptor_, &TSDFRangeDataInserterOptions2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto() {
  delete TSDFRangeDataInserterOptions2D::default_instance_;
  delete TSDFRangeDataInserterOptions2D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::mapping::proto::protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\nDcartographer/mapping/proto/tsdf_range_"
    "data_inserter_options_2d.proto\022\032cartogra"
    "pher.mapping.proto\032=cartographer/mapping"
    "/proto/normal_estimation_options_2d.prot"
    "o\"\233\003\n\036TSDFRangeDataInserterOptions2D\022\033\n\023"
    "truncation_distance\030\001 \001(\001\022\026\n\016maximum_wei"
    "ght\030\002 \001(\001\022\031\n\021update_free_space\030\003 \001(\010\022X\n\031"
    "normal_estimation_options\030\004 \001(\01325.cartog"
    "rapher.mapping.proto.NormalEstimationOpt"
    "ions2D\022+\n#project_sdf_distance_to_scan_n"
    "ormal\030\005 \001(\010\022$\n\034update_weight_range_expon"
    "ent\030\006 \001(\005\022\?\n7update_weight_angle_scan_no"
    "rmal_to_ray_kernel_bandwidth\030\007 \001(\001\022;\n3up"
    "date_weight_distance_cell_to_hit_kernel_"
    "bandwidth\030\010 \001(\001b\006proto3", 583);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/tsdf_range_data_inserter_options_2d.proto", &protobuf_RegisterTypes);
  TSDFRangeDataInserterOptions2D::default_instance_ = new TSDFRangeDataInserterOptions2D();
  TSDFRangeDataInserterOptions2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSDFRangeDataInserterOptions2D::kTruncationDistanceFieldNumber;
const int TSDFRangeDataInserterOptions2D::kMaximumWeightFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateFreeSpaceFieldNumber;
const int TSDFRangeDataInserterOptions2D::kNormalEstimationOptionsFieldNumber;
const int TSDFRangeDataInserterOptions2D::kProjectSdfDistanceToScanNormalFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateWeightRangeExponentFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateWeightAngleScanNormalToRayKernelBandwidthFieldNumber;
const int TSDFRangeDataInserterOptions2D::kUpdateWeightDistanceCellToHitKernelBandwidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSDFRangeDataInserterOptions2D::TSDFRangeDataInserterOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
}

void TSDFRangeDataInserterOptions2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  normal_estimation_options_ = const_cast< ::cartographer::mapping::proto::NormalEstimationOptions2D*>(&::cartographer::mapping::proto::NormalEstimationOptions2D::default_instance());
}

TSDFRangeDataInserterOptions2D::TSDFRangeDataInserterOptions2D(const TSDFRangeDataInserterOptions2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
}

void TSDFRangeDataInserterOptions2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  truncation_distance_ = 0;
  maximum_weight_ = 0;
  update_free_space_ = false;
  normal_estimation_options_ = NULL;
  project_sdf_distance_to_scan_normal_ = false;
  update_weight_range_exponent_ = 0;
  update_weight_angle_scan_normal_to_ray_kernel_bandwidth_ = 0;
  update_weight_distance_cell_to_hit_kernel_bandwidth_ = 0;
}

TSDFRangeDataInserterOptions2D::~TSDFRangeDataInserterOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  SharedDtor();
}

void TSDFRangeDataInserterOptions2D::SharedDtor() {
  if (this != default_instance_) {
    delete normal_estimation_options_;
  }
}

void TSDFRangeDataInserterOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSDFRangeDataInserterOptions2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSDFRangeDataInserterOptions2D_descriptor_;
}

const TSDFRangeDataInserterOptions2D& TSDFRangeDataInserterOptions2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto();
  return *default_instance_;
}

TSDFRangeDataInserterOptions2D* TSDFRangeDataInserterOptions2D::default_instance_ = NULL;

TSDFRangeDataInserterOptions2D* TSDFRangeDataInserterOptions2D::New(::google::protobuf::Arena* arena) const {
  TSDFRangeDataInserterOptions2D* n = new TSDFRangeDataInserterOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSDFRangeDataInserterOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TSDFRangeDataInserterOptions2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TSDFRangeDataInserterOptions2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(truncation_distance_, maximum_weight_);
  ZR_(update_free_space_, update_weight_distance_cell_to_hit_kernel_bandwidth_);
  if (GetArenaNoVirtual() == NULL && normal_estimation_options_ != NULL) delete normal_estimation_options_;
  normal_estimation_options_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TSDFRangeDataInserterOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double truncation_distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &truncation_distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_maximum_weight;
        break;
      }

      // optional double maximum_weight = 2;
      case 2: {
        if (tag == 17) {
         parse_maximum_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_free_space;
        break;
      }

      // optional bool update_free_space = 3;
      case 3: {
        if (tag == 24) {
         parse_update_free_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_free_space_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normal_estimation_options;
        break;
      }

      // optional .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
      case 4: {
        if (tag == 34) {
         parse_normal_estimation_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_estimation_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_project_sdf_distance_to_scan_normal;
        break;
      }

      // optional bool project_sdf_distance_to_scan_normal = 5;
      case 5: {
        if (tag == 40) {
         parse_project_sdf_distance_to_scan_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &project_sdf_distance_to_scan_normal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_update_weight_range_exponent;
        break;
      }

      // optional int32 update_weight_range_exponent = 6;
      case 6: {
        if (tag == 48) {
         parse_update_weight_range_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_weight_range_exponent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_update_weight_angle_scan_normal_to_ray_kernel_bandwidth;
        break;
      }

      // optional double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
      case 7: {
        if (tag == 57) {
         parse_update_weight_angle_scan_normal_to_ray_kernel_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_weight_angle_scan_normal_to_ray_kernel_bandwidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_update_weight_distance_cell_to_hit_kernel_bandwidth;
        break;
      }

      // optional double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
      case 8: {
        if (tag == 65) {
         parse_update_weight_distance_cell_to_hit_kernel_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_weight_distance_cell_to_hit_kernel_bandwidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  return false;
#undef DO_
}

void TSDFRangeDataInserterOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  // optional double truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->truncation_distance(), output);
  }

  // optional double maximum_weight = 2;
  if (this->maximum_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maximum_weight(), output);
  }

  // optional bool update_free_space = 3;
  if (this->update_free_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->update_free_space(), output);
  }

  // optional .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
  if (this->has_normal_estimation_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->normal_estimation_options_, output);
  }

  // optional bool project_sdf_distance_to_scan_normal = 5;
  if (this->project_sdf_distance_to_scan_normal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->project_sdf_distance_to_scan_normal(), output);
  }

  // optional int32 update_weight_range_exponent = 6;
  if (this->update_weight_range_exponent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->update_weight_range_exponent(), output);
  }

  // optional double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
  if (this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth(), output);
  }

  // optional double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
  if (this->update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->update_weight_distance_cell_to_hit_kernel_bandwidth(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
}

::google::protobuf::uint8* TSDFRangeDataInserterOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  // optional double truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->truncation_distance(), target);
  }

  // optional double maximum_weight = 2;
  if (this->maximum_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maximum_weight(), target);
  }

  // optional bool update_free_space = 3;
  if (this->update_free_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->update_free_space(), target);
  }

  // optional .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
  if (this->has_normal_estimation_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->normal_estimation_options_, false, target);
  }

  // optional bool project_sdf_distance_to_scan_normal = 5;
  if (this->project_sdf_distance_to_scan_normal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->project_sdf_distance_to_scan_normal(), target);
  }

  // optional int32 update_weight_range_exponent = 6;
  if (this->update_weight_range_exponent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->update_weight_range_exponent(), target);
  }

  // optional double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
  if (this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth(), target);
  }

  // optional double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
  if (this->update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->update_weight_distance_cell_to_hit_kernel_bandwidth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  return target;
}

int TSDFRangeDataInserterOptions2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  int total_size = 0;

  // optional double truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    total_size += 1 + 8;
  }

  // optional double maximum_weight = 2;
  if (this->maximum_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional bool update_free_space = 3;
  if (this->update_free_space() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
  if (this->has_normal_estimation_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_estimation_options_);
  }

  // optional bool project_sdf_distance_to_scan_normal = 5;
  if (this->project_sdf_distance_to_scan_normal() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 update_weight_range_exponent = 6;
  if (this->update_weight_range_exponent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->update_weight_range_exponent());
  }

  // optional double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
  if (this->update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    total_size += 1 + 8;
  }

  // optional double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
  if (this->update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSDFRangeDataInserterOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TSDFRangeDataInserterOptions2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TSDFRangeDataInserterOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
    MergeFrom(*source);
  }
}

void TSDFRangeDataInserterOptions2D::MergeFrom(const TSDFRangeDataInserterOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.truncation_distance() != 0) {
    set_truncation_distance(from.truncation_distance());
  }
  if (from.maximum_weight() != 0) {
    set_maximum_weight(from.maximum_weight());
  }
  if (from.update_free_space() != 0) {
    set_update_free_space(from.update_free_space());
  }
  if (from.has_normal_estimation_options()) {
    mutable_normal_estimation_options()->::cartographer::mapping::proto::NormalEstimationOptions2D::MergeFrom(from.normal_estimation_options());
  }
  if (from.project_sdf_distance_to_scan_normal() != 0) {
    set_project_sdf_distance_to_scan_normal(from.project_sdf_distance_to_scan_normal());
  }
  if (from.update_weight_range_exponent() != 0) {
    set_update_weight_range_exponent(from.update_weight_range_exponent());
  }
  if (from.update_weight_angle_scan_normal_to_ray_kernel_bandwidth() != 0) {
    set_update_weight_angle_scan_normal_to_ray_kernel_bandwidth(from.update_weight_angle_scan_normal_to_ray_kernel_bandwidth());
  }
  if (from.update_weight_distance_cell_to_hit_kernel_bandwidth() != 0) {
    set_update_weight_distance_cell_to_hit_kernel_bandwidth(from.update_weight_distance_cell_to_hit_kernel_bandwidth());
  }
}

void TSDFRangeDataInserterOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSDFRangeDataInserterOptions2D::CopyFrom(const TSDFRangeDataInserterOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSDFRangeDataInserterOptions2D::IsInitialized() const {

  return true;
}

void TSDFRangeDataInserterOptions2D::Swap(TSDFRangeDataInserterOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSDFRangeDataInserterOptions2D::InternalSwap(TSDFRangeDataInserterOptions2D* other) {
  std::swap(truncation_distance_, other->truncation_distance_);
  std::swap(maximum_weight_, other->maximum_weight_);
  std::swap(update_free_space_, other->update_free_space_);
  std::swap(normal_estimation_options_, other->normal_estimation_options_);
  std::swap(project_sdf_distance_to_scan_normal_, other->project_sdf_distance_to_scan_normal_);
  std::swap(update_weight_range_exponent_, other->update_weight_range_exponent_);
  std::swap(update_weight_angle_scan_normal_to_ray_kernel_bandwidth_, other->update_weight_angle_scan_normal_to_ray_kernel_bandwidth_);
  std::swap(update_weight_distance_cell_to_hit_kernel_bandwidth_, other->update_weight_distance_cell_to_hit_kernel_bandwidth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSDFRangeDataInserterOptions2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSDFRangeDataInserterOptions2D_descriptor_;
  metadata.reflection = TSDFRangeDataInserterOptions2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSDFRangeDataInserterOptions2D

// optional double truncation_distance = 1;
void TSDFRangeDataInserterOptions2D::clear_truncation_distance() {
  truncation_distance_ = 0;
}
 double TSDFRangeDataInserterOptions2D::truncation_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.truncation_distance)
  return truncation_distance_;
}
 void TSDFRangeDataInserterOptions2D::set_truncation_distance(double value) {
  
  truncation_distance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.truncation_distance)
}

// optional double maximum_weight = 2;
void TSDFRangeDataInserterOptions2D::clear_maximum_weight() {
  maximum_weight_ = 0;
}
 double TSDFRangeDataInserterOptions2D::maximum_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.maximum_weight)
  return maximum_weight_;
}
 void TSDFRangeDataInserterOptions2D::set_maximum_weight(double value) {
  
  maximum_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.maximum_weight)
}

// optional bool update_free_space = 3;
void TSDFRangeDataInserterOptions2D::clear_update_free_space() {
  update_free_space_ = false;
}
 bool TSDFRangeDataInserterOptions2D::update_free_space() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_free_space)
  return update_free_space_;
}
 void TSDFRangeDataInserterOptions2D::set_update_free_space(bool value) {
  
  update_free_space_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_free_space)
}

// optional .cartographer.mapping.proto.NormalEstimationOptions2D normal_estimation_options = 4;
bool TSDFRangeDataInserterOptions2D::has_normal_estimation_options() const {
  return !_is_default_instance_ && normal_estimation_options_ != NULL;
}
void TSDFRangeDataInserterOptions2D::clear_normal_estimation_options() {
  if (GetArenaNoVirtual() == NULL && normal_estimation_options_ != NULL) delete normal_estimation_options_;
  normal_estimation_options_ = NULL;
}
const ::cartographer::mapping::proto::NormalEstimationOptions2D& TSDFRangeDataInserterOptions2D::normal_estimation_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.normal_estimation_options)
  return normal_estimation_options_ != NULL ? *normal_estimation_options_ : *default_instance_->normal_estimation_options_;
}
::cartographer::mapping::proto::NormalEstimationOptions2D* TSDFRangeDataInserterOptions2D::mutable_normal_estimation_options() {
  
  if (normal_estimation_options_ == NULL) {
    normal_estimation_options_ = new ::cartographer::mapping::proto::NormalEstimationOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.normal_estimation_options)
  return normal_estimation_options_;
}
::cartographer::mapping::proto::NormalEstimationOptions2D* TSDFRangeDataInserterOptions2D::release_normal_estimation_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.normal_estimation_options)
  
  ::cartographer::mapping::proto::NormalEstimationOptions2D* temp = normal_estimation_options_;
  normal_estimation_options_ = NULL;
  return temp;
}
void TSDFRangeDataInserterOptions2D::set_allocated_normal_estimation_options(::cartographer::mapping::proto::NormalEstimationOptions2D* normal_estimation_options) {
  delete normal_estimation_options_;
  normal_estimation_options_ = normal_estimation_options;
  if (normal_estimation_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.normal_estimation_options)
}

// optional bool project_sdf_distance_to_scan_normal = 5;
void TSDFRangeDataInserterOptions2D::clear_project_sdf_distance_to_scan_normal() {
  project_sdf_distance_to_scan_normal_ = false;
}
 bool TSDFRangeDataInserterOptions2D::project_sdf_distance_to_scan_normal() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.project_sdf_distance_to_scan_normal)
  return project_sdf_distance_to_scan_normal_;
}
 void TSDFRangeDataInserterOptions2D::set_project_sdf_distance_to_scan_normal(bool value) {
  
  project_sdf_distance_to_scan_normal_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.project_sdf_distance_to_scan_normal)
}

// optional int32 update_weight_range_exponent = 6;
void TSDFRangeDataInserterOptions2D::clear_update_weight_range_exponent() {
  update_weight_range_exponent_ = 0;
}
 ::google::protobuf::int32 TSDFRangeDataInserterOptions2D::update_weight_range_exponent() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_weight_range_exponent)
  return update_weight_range_exponent_;
}
 void TSDFRangeDataInserterOptions2D::set_update_weight_range_exponent(::google::protobuf::int32 value) {
  
  update_weight_range_exponent_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_weight_range_exponent)
}

// optional double update_weight_angle_scan_normal_to_ray_kernel_bandwidth = 7;
void TSDFRangeDataInserterOptions2D::clear_update_weight_angle_scan_normal_to_ray_kernel_bandwidth() {
  update_weight_angle_scan_normal_to_ray_kernel_bandwidth_ = 0;
}
 double TSDFRangeDataInserterOptions2D::update_weight_angle_scan_normal_to_ray_kernel_bandwidth() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_weight_angle_scan_normal_to_ray_kernel_bandwidth)
  return update_weight_angle_scan_normal_to_ray_kernel_bandwidth_;
}
 void TSDFRangeDataInserterOptions2D::set_update_weight_angle_scan_normal_to_ray_kernel_bandwidth(double value) {
  
  update_weight_angle_scan_normal_to_ray_kernel_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_weight_angle_scan_normal_to_ray_kernel_bandwidth)
}

// optional double update_weight_distance_cell_to_hit_kernel_bandwidth = 8;
void TSDFRangeDataInserterOptions2D::clear_update_weight_distance_cell_to_hit_kernel_bandwidth() {
  update_weight_distance_cell_to_hit_kernel_bandwidth_ = 0;
}
 double TSDFRangeDataInserterOptions2D::update_weight_distance_cell_to_hit_kernel_bandwidth() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_weight_distance_cell_to_hit_kernel_bandwidth)
  return update_weight_distance_cell_to_hit_kernel_bandwidth_;
}
 void TSDFRangeDataInserterOptions2D::set_update_weight_distance_cell_to_hit_kernel_bandwidth(double value) {
  
  update_weight_distance_cell_to_hit_kernel_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDFRangeDataInserterOptions2D.update_weight_distance_cell_to_hit_kernel_bandwidth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
