// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/timestamped_transform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/transform/proto/timestamped_transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace transform {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TimestampedTransform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimestampedTransform_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() {
  protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/transform/proto/timestamped_transform.proto");
  GOOGLE_CHECK(file != NULL);
  TimestampedTransform_descriptor_ = file->message_type(0);
  static const int TimestampedTransform_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampedTransform, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampedTransform, transform_),
  };
  TimestampedTransform_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimestampedTransform_descriptor_,
      TimestampedTransform::default_instance_,
      TimestampedTransform_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimestampedTransform),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampedTransform, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimestampedTransform, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimestampedTransform_descriptor_, &TimestampedTransform::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() {
  delete TimestampedTransform::default_instance_;
  delete TimestampedTransform_reflection_;
}

void protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n8cartographer/transform/proto/timestamp"
    "ed_transform.proto\022\034cartographer.transfo"
    "rm.proto\032,cartographer/transform/proto/t"
    "ransform.proto\"^\n\024TimestampedTransform\022\014"
    "\n\004time\030\001 \001(\003\0228\n\ttransform\030\002 \001(\0132%.cartog"
    "rapher.transform.proto.Rigid3db\006proto3", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/transform/proto/timestamped_transform.proto", &protobuf_RegisterTypes);
  TimestampedTransform::default_instance_ = new TimestampedTransform();
  TimestampedTransform::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto {
  StaticDescriptorInitializer_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto() {
    protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto();
  }
} static_descriptor_initializer_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimestampedTransform::kTimeFieldNumber;
const int TimestampedTransform::kTransformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimestampedTransform::TimestampedTransform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.TimestampedTransform)
}

void TimestampedTransform::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

TimestampedTransform::TimestampedTransform(const TimestampedTransform& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.TimestampedTransform)
}

void TimestampedTransform::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  transform_ = NULL;
}

TimestampedTransform::~TimestampedTransform() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.TimestampedTransform)
  SharedDtor();
}

void TimestampedTransform::SharedDtor() {
  if (this != default_instance_) {
    delete transform_;
  }
}

void TimestampedTransform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimestampedTransform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimestampedTransform_descriptor_;
}

const TimestampedTransform& TimestampedTransform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftimestamped_5ftransform_2eproto();
  return *default_instance_;
}

TimestampedTransform* TimestampedTransform::default_instance_ = NULL;

TimestampedTransform* TimestampedTransform::New(::google::protobuf::Arena* arena) const {
  TimestampedTransform* n = new TimestampedTransform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimestampedTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.TimestampedTransform)
  time_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}

bool TimestampedTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.TimestampedTransform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transform;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d transform = 2;
      case 2: {
        if (tag == 18) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.TimestampedTransform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.TimestampedTransform)
  return false;
#undef DO_
}

void TimestampedTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.TimestampedTransform)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transform_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.TimestampedTransform)
}

::google::protobuf::uint8* TimestampedTransform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.TimestampedTransform)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->transform_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.TimestampedTransform)
  return target;
}

int TimestampedTransform::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.TimestampedTransform)
  int total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimestampedTransform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.TimestampedTransform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TimestampedTransform* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimestampedTransform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.TimestampedTransform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.TimestampedTransform)
    MergeFrom(*source);
  }
}

void TimestampedTransform::MergeFrom(const TimestampedTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.TimestampedTransform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.has_transform()) {
    mutable_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.transform());
  }
}

void TimestampedTransform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.TimestampedTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampedTransform::CopyFrom(const TimestampedTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.TimestampedTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampedTransform::IsInitialized() const {

  return true;
}

void TimestampedTransform::Swap(TimestampedTransform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimestampedTransform::InternalSwap(TimestampedTransform* other) {
  std::swap(time_, other->time_);
  std::swap(transform_, other->transform_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimestampedTransform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimestampedTransform_descriptor_;
  metadata.reflection = TimestampedTransform_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimestampedTransform

// optional int64 time = 1;
void TimestampedTransform::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TimestampedTransform::time() const {
  // @@protoc_insertion_point(field_get:cartographer.transform.proto.TimestampedTransform.time)
  return time_;
}
 void TimestampedTransform::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cartographer.transform.proto.TimestampedTransform.time)
}

// optional .cartographer.transform.proto.Rigid3d transform = 2;
bool TimestampedTransform::has_transform() const {
  return !_is_default_instance_ && transform_ != NULL;
}
void TimestampedTransform::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& TimestampedTransform::transform() const {
  // @@protoc_insertion_point(field_get:cartographer.transform.proto.TimestampedTransform.transform)
  return transform_ != NULL ? *transform_ : *default_instance_->transform_;
}
::cartographer::transform::proto::Rigid3d* TimestampedTransform::mutable_transform() {
  
  if (transform_ == NULL) {
    transform_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.transform.proto.TimestampedTransform.transform)
  return transform_;
}
::cartographer::transform::proto::Rigid3d* TimestampedTransform::release_transform() {
  // @@protoc_insertion_point(field_release:cartographer.transform.proto.TimestampedTransform.transform)
  
  ::cartographer::transform::proto::Rigid3d* temp = transform_;
  transform_ = NULL;
  return temp;
}
void TimestampedTransform::set_allocated_transform(::cartographer::transform::proto::Rigid3d* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.transform.proto.TimestampedTransform.transform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
