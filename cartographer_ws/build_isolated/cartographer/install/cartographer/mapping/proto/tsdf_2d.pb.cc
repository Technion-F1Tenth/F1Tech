// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/tsdf_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/tsdf_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TSDF2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSDF2D_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/tsdf_2d.proto");
  GOOGLE_CHECK(file != NULL);
  TSDF2D_descriptor_ = file->message_type(0);
  static const int TSDF2D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDF2D, truncation_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDF2D, max_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDF2D, weight_cells_),
  };
  TSDF2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSDF2D_descriptor_,
      TSDF2D::default_instance_,
      TSDF2D_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSDF2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDF2D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSDF2D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSDF2D_descriptor_, &TSDF2D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() {
  delete TSDF2D::default_instance_;
  delete TSDF2D_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(cartographer/mapping/proto/tsdf_2d.pro"
    "to\022\032cartographer.mapping.proto\"O\n\006TSDF2D"
    "\022\033\n\023truncation_distance\030\001 \001(\002\022\022\n\nmax_wei"
    "ght\030\002 \001(\002\022\024\n\014weight_cells\030\003 \003(\005b\006proto3", 159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/tsdf_2d.proto", &protobuf_RegisterTypes);
  TSDF2D::default_instance_ = new TSDF2D();
  TSDF2D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSDF2D::kTruncationDistanceFieldNumber;
const int TSDF2D::kMaxWeightFieldNumber;
const int TSDF2D::kWeightCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSDF2D::TSDF2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TSDF2D)
}

void TSDF2D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TSDF2D::TSDF2D(const TSDF2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TSDF2D)
}

void TSDF2D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  truncation_distance_ = 0;
  max_weight_ = 0;
}

TSDF2D::~TSDF2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TSDF2D)
  SharedDtor();
}

void TSDF2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSDF2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSDF2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSDF2D_descriptor_;
}

const TSDF2D& TSDF2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto();
  return *default_instance_;
}

TSDF2D* TSDF2D::default_instance_ = NULL;

TSDF2D* TSDF2D::New(::google::protobuf::Arena* arena) const {
  TSDF2D* n = new TSDF2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSDF2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TSDF2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TSDF2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TSDF2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(truncation_distance_, max_weight_);

#undef ZR_HELPER_
#undef ZR_

  weight_cells_.Clear();
}

bool TSDF2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TSDF2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float truncation_distance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &truncation_distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_weight;
        break;
      }

      // optional float max_weight = 2;
      case 2: {
        if (tag == 21) {
         parse_max_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_cells;
        break;
      }

      // repeated int32 weight_cells = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_cells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weight_cells())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_weight_cells())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TSDF2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TSDF2D)
  return false;
#undef DO_
}

void TSDF2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TSDF2D)
  // optional float truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->truncation_distance(), output);
  }

  // optional float max_weight = 2;
  if (this->max_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_weight(), output);
  }

  // repeated int32 weight_cells = 3;
  if (this->weight_cells_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weight_cells_cached_byte_size_);
  }
  for (int i = 0; i < this->weight_cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->weight_cells(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TSDF2D)
}

::google::protobuf::uint8* TSDF2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TSDF2D)
  // optional float truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->truncation_distance(), target);
  }

  // optional float max_weight = 2;
  if (this->max_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_weight(), target);
  }

  // repeated int32 weight_cells = 3;
  if (this->weight_cells_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _weight_cells_cached_byte_size_, target);
  }
  for (int i = 0; i < this->weight_cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->weight_cells(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TSDF2D)
  return target;
}

int TSDF2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TSDF2D)
  int total_size = 0;

  // optional float truncation_distance = 1;
  if (this->truncation_distance() != 0) {
    total_size += 1 + 4;
  }

  // optional float max_weight = 2;
  if (this->max_weight() != 0) {
    total_size += 1 + 4;
  }

  // repeated int32 weight_cells = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->weight_cells_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weight_cells(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weight_cells_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSDF2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TSDF2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TSDF2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TSDF2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TSDF2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TSDF2D)
    MergeFrom(*source);
  }
}

void TSDF2D::MergeFrom(const TSDF2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TSDF2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  weight_cells_.MergeFrom(from.weight_cells_);
  if (from.truncation_distance() != 0) {
    set_truncation_distance(from.truncation_distance());
  }
  if (from.max_weight() != 0) {
    set_max_weight(from.max_weight());
  }
}

void TSDF2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TSDF2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSDF2D::CopyFrom(const TSDF2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TSDF2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSDF2D::IsInitialized() const {

  return true;
}

void TSDF2D::Swap(TSDF2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSDF2D::InternalSwap(TSDF2D* other) {
  std::swap(truncation_distance_, other->truncation_distance_);
  std::swap(max_weight_, other->max_weight_);
  weight_cells_.UnsafeArenaSwap(&other->weight_cells_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSDF2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSDF2D_descriptor_;
  metadata.reflection = TSDF2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSDF2D

// optional float truncation_distance = 1;
void TSDF2D::clear_truncation_distance() {
  truncation_distance_ = 0;
}
 float TSDF2D::truncation_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.truncation_distance)
  return truncation_distance_;
}
 void TSDF2D::set_truncation_distance(float value) {
  
  truncation_distance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.truncation_distance)
}

// optional float max_weight = 2;
void TSDF2D::clear_max_weight() {
  max_weight_ = 0;
}
 float TSDF2D::max_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.max_weight)
  return max_weight_;
}
 void TSDF2D::set_max_weight(float value) {
  
  max_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.max_weight)
}

// repeated int32 weight_cells = 3;
int TSDF2D::weight_cells_size() const {
  return weight_cells_.size();
}
void TSDF2D::clear_weight_cells() {
  weight_cells_.Clear();
}
 ::google::protobuf::int32 TSDF2D::weight_cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.weight_cells)
  return weight_cells_.Get(index);
}
 void TSDF2D::set_weight_cells(int index, ::google::protobuf::int32 value) {
  weight_cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.weight_cells)
}
 void TSDF2D::add_weight_cells(::google::protobuf::int32 value) {
  weight_cells_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TSDF2D.weight_cells)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TSDF2D::weight_cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TSDF2D.weight_cells)
  return weight_cells_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TSDF2D::mutable_weight_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TSDF2D.weight_cells)
  return &weight_cells_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
