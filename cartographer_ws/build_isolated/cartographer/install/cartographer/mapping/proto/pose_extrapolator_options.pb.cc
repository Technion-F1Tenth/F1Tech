// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_extrapolator_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/pose_extrapolator_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ConstantVelocityPoseExtrapolatorOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstantVelocityPoseExtrapolatorOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImuBasedPoseExtrapolatorOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImuBasedPoseExtrapolatorOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoseExtrapolatorOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoseExtrapolatorOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/pose_extrapolator_options.proto");
  GOOGLE_CHECK(file != NULL);
  ConstantVelocityPoseExtrapolatorOptions_descriptor_ = file->message_type(0);
  static const int ConstantVelocityPoseExtrapolatorOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantVelocityPoseExtrapolatorOptions, imu_gravity_time_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantVelocityPoseExtrapolatorOptions, pose_queue_duration_),
  };
  ConstantVelocityPoseExtrapolatorOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConstantVelocityPoseExtrapolatorOptions_descriptor_,
      ConstantVelocityPoseExtrapolatorOptions::default_instance_,
      ConstantVelocityPoseExtrapolatorOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConstantVelocityPoseExtrapolatorOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantVelocityPoseExtrapolatorOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantVelocityPoseExtrapolatorOptions, _is_default_instance_));
  ImuBasedPoseExtrapolatorOptions_descriptor_ = file->message_type(1);
  static const int ImuBasedPoseExtrapolatorOptions_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, pose_queue_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, gravity_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, pose_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, pose_rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, imu_acceleration_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, imu_rotation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, solver_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, odometry_translation_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, odometry_rotation_weight_),
  };
  ImuBasedPoseExtrapolatorOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImuBasedPoseExtrapolatorOptions_descriptor_,
      ImuBasedPoseExtrapolatorOptions::default_instance_,
      ImuBasedPoseExtrapolatorOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImuBasedPoseExtrapolatorOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuBasedPoseExtrapolatorOptions, _is_default_instance_));
  PoseExtrapolatorOptions_descriptor_ = file->message_type(2);
  static const int PoseExtrapolatorOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseExtrapolatorOptions, use_imu_based_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseExtrapolatorOptions, constant_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseExtrapolatorOptions, imu_based_),
  };
  PoseExtrapolatorOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoseExtrapolatorOptions_descriptor_,
      PoseExtrapolatorOptions::default_instance_,
      PoseExtrapolatorOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(PoseExtrapolatorOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseExtrapolatorOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseExtrapolatorOptions, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConstantVelocityPoseExtrapolatorOptions_descriptor_, &ConstantVelocityPoseExtrapolatorOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImuBasedPoseExtrapolatorOptions_descriptor_, &ImuBasedPoseExtrapolatorOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoseExtrapolatorOptions_descriptor_, &PoseExtrapolatorOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
  delete ConstantVelocityPoseExtrapolatorOptions::default_instance_;
  delete ConstantVelocityPoseExtrapolatorOptions_reflection_;
  delete ImuBasedPoseExtrapolatorOptions::default_instance_;
  delete ImuBasedPoseExtrapolatorOptions_reflection_;
  delete PoseExtrapolatorOptions::default_instance_;
  delete PoseExtrapolatorOptions_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::common::proto::protobuf_AddDesc_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n:cartographer/mapping/proto/pose_extrap"
    "olator_options.proto\022\032cartographer.mappi"
    "ng.proto\0324cartographer/common/proto/cere"
    "s_solver_options.proto\"i\n\'ConstantVeloci"
    "tyPoseExtrapolatorOptions\022!\n\031imu_gravity"
    "_time_constant\030\001 \001(\001\022\033\n\023pose_queue_durat"
    "ion\030\002 \001(\001\"\343\002\n\037ImuBasedPoseExtrapolatorOp"
    "tions\022\033\n\023pose_queue_duration\030\001 \001(\001\022\030\n\020gr"
    "avity_constant\030\002 \001(\001\022\037\n\027pose_translation"
    "_weight\030\003 \001(\001\022\034\n\024pose_rotation_weight\030\004 "
    "\001(\001\022\037\n\027imu_acceleration_weight\030\005 \001(\001\022\033\n\023"
    "imu_rotation_weight\030\006 \001(\001\022E\n\016solver_opti"
    "ons\030\007 \001(\0132-.cartographer.common.proto.Ce"
    "resSolverOptions\022#\n\033odometry_translation"
    "_weight\030\010 \001(\001\022 \n\030odometry_rotation_weigh"
    "t\030\t \001(\001\"\340\001\n\027PoseExtrapolatorOptions\022\025\n\ru"
    "se_imu_based\030\001 \001(\010\022^\n\021constant_velocity\030"
    "\002 \001(\0132C.cartographer.mapping.proto.Const"
    "antVelocityPoseExtrapolatorOptions\022N\n\tim"
    "u_based\030\003 \001(\0132;.cartographer.mapping.pro"
    "to.ImuBasedPoseExtrapolatorOptionsb\006prot"
    "o3", 842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_extrapolator_options.proto", &protobuf_RegisterTypes);
  ConstantVelocityPoseExtrapolatorOptions::default_instance_ = new ConstantVelocityPoseExtrapolatorOptions();
  ImuBasedPoseExtrapolatorOptions::default_instance_ = new ImuBasedPoseExtrapolatorOptions();
  PoseExtrapolatorOptions::default_instance_ = new PoseExtrapolatorOptions();
  ConstantVelocityPoseExtrapolatorOptions::default_instance_->InitAsDefaultInstance();
  ImuBasedPoseExtrapolatorOptions::default_instance_->InitAsDefaultInstance();
  PoseExtrapolatorOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstantVelocityPoseExtrapolatorOptions::kImuGravityTimeConstantFieldNumber;
const int ConstantVelocityPoseExtrapolatorOptions::kPoseQueueDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstantVelocityPoseExtrapolatorOptions::ConstantVelocityPoseExtrapolatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}

void ConstantVelocityPoseExtrapolatorOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConstantVelocityPoseExtrapolatorOptions::ConstantVelocityPoseExtrapolatorOptions(const ConstantVelocityPoseExtrapolatorOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}

void ConstantVelocityPoseExtrapolatorOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  imu_gravity_time_constant_ = 0;
  pose_queue_duration_ = 0;
}

ConstantVelocityPoseExtrapolatorOptions::~ConstantVelocityPoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  SharedDtor();
}

void ConstantVelocityPoseExtrapolatorOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConstantVelocityPoseExtrapolatorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstantVelocityPoseExtrapolatorOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstantVelocityPoseExtrapolatorOptions_descriptor_;
}

const ConstantVelocityPoseExtrapolatorOptions& ConstantVelocityPoseExtrapolatorOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  return *default_instance_;
}

ConstantVelocityPoseExtrapolatorOptions* ConstantVelocityPoseExtrapolatorOptions::default_instance_ = NULL;

ConstantVelocityPoseExtrapolatorOptions* ConstantVelocityPoseExtrapolatorOptions::New(::google::protobuf::Arena* arena) const {
  ConstantVelocityPoseExtrapolatorOptions* n = new ConstantVelocityPoseExtrapolatorOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstantVelocityPoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConstantVelocityPoseExtrapolatorOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConstantVelocityPoseExtrapolatorOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(imu_gravity_time_constant_, pose_queue_duration_);

#undef ZR_HELPER_
#undef ZR_

}

bool ConstantVelocityPoseExtrapolatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double imu_gravity_time_constant = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_pose_queue_duration;
        break;
      }

      // optional double pose_queue_duration = 2;
      case 2: {
        if (tag == 17) {
         parse_pose_queue_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_queue_duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return false;
#undef DO_
}

void ConstantVelocityPoseExtrapolatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  // optional double imu_gravity_time_constant = 1;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->imu_gravity_time_constant(), output);
  }

  // optional double pose_queue_duration = 2;
  if (this->pose_queue_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pose_queue_duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
}

::google::protobuf::uint8* ConstantVelocityPoseExtrapolatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  // optional double imu_gravity_time_constant = 1;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->imu_gravity_time_constant(), target);
  }

  // optional double pose_queue_duration = 2;
  if (this->pose_queue_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pose_queue_duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  return target;
}

int ConstantVelocityPoseExtrapolatorOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  int total_size = 0;

  // optional double imu_gravity_time_constant = 1;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 1 + 8;
  }

  // optional double pose_queue_duration = 2;
  if (this->pose_queue_duration() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstantVelocityPoseExtrapolatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConstantVelocityPoseExtrapolatorOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstantVelocityPoseExtrapolatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void ConstantVelocityPoseExtrapolatorOptions::MergeFrom(const ConstantVelocityPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.pose_queue_duration() != 0) {
    set_pose_queue_duration(from.pose_queue_duration());
  }
}

void ConstantVelocityPoseExtrapolatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantVelocityPoseExtrapolatorOptions::CopyFrom(const ConstantVelocityPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantVelocityPoseExtrapolatorOptions::IsInitialized() const {

  return true;
}

void ConstantVelocityPoseExtrapolatorOptions::Swap(ConstantVelocityPoseExtrapolatorOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstantVelocityPoseExtrapolatorOptions::InternalSwap(ConstantVelocityPoseExtrapolatorOptions* other) {
  std::swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  std::swap(pose_queue_duration_, other->pose_queue_duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstantVelocityPoseExtrapolatorOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstantVelocityPoseExtrapolatorOptions_descriptor_;
  metadata.reflection = ConstantVelocityPoseExtrapolatorOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstantVelocityPoseExtrapolatorOptions

// optional double imu_gravity_time_constant = 1;
void ConstantVelocityPoseExtrapolatorOptions::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
}
 double ConstantVelocityPoseExtrapolatorOptions::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
 void ConstantVelocityPoseExtrapolatorOptions::set_imu_gravity_time_constant(double value) {
  
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.imu_gravity_time_constant)
}

// optional double pose_queue_duration = 2;
void ConstantVelocityPoseExtrapolatorOptions::clear_pose_queue_duration() {
  pose_queue_duration_ = 0;
}
 double ConstantVelocityPoseExtrapolatorOptions::pose_queue_duration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.pose_queue_duration)
  return pose_queue_duration_;
}
 void ConstantVelocityPoseExtrapolatorOptions::set_pose_queue_duration(double value) {
  
  pose_queue_duration_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.pose_queue_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuBasedPoseExtrapolatorOptions::kPoseQueueDurationFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kGravityConstantFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kPoseTranslationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kPoseRotationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kImuAccelerationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kImuRotationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kSolverOptionsFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kOdometryTranslationWeightFieldNumber;
const int ImuBasedPoseExtrapolatorOptions::kOdometryRotationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuBasedPoseExtrapolatorOptions::ImuBasedPoseExtrapolatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}

void ImuBasedPoseExtrapolatorOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(&::cartographer::common::proto::CeresSolverOptions::default_instance());
}

ImuBasedPoseExtrapolatorOptions::ImuBasedPoseExtrapolatorOptions(const ImuBasedPoseExtrapolatorOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}

void ImuBasedPoseExtrapolatorOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pose_queue_duration_ = 0;
  gravity_constant_ = 0;
  pose_translation_weight_ = 0;
  pose_rotation_weight_ = 0;
  imu_acceleration_weight_ = 0;
  imu_rotation_weight_ = 0;
  solver_options_ = NULL;
  odometry_translation_weight_ = 0;
  odometry_rotation_weight_ = 0;
}

ImuBasedPoseExtrapolatorOptions::~ImuBasedPoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  SharedDtor();
}

void ImuBasedPoseExtrapolatorOptions::SharedDtor() {
  if (this != default_instance_) {
    delete solver_options_;
  }
}

void ImuBasedPoseExtrapolatorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuBasedPoseExtrapolatorOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuBasedPoseExtrapolatorOptions_descriptor_;
}

const ImuBasedPoseExtrapolatorOptions& ImuBasedPoseExtrapolatorOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  return *default_instance_;
}

ImuBasedPoseExtrapolatorOptions* ImuBasedPoseExtrapolatorOptions::default_instance_ = NULL;

ImuBasedPoseExtrapolatorOptions* ImuBasedPoseExtrapolatorOptions::New(::google::protobuf::Arena* arena) const {
  ImuBasedPoseExtrapolatorOptions* n = new ImuBasedPoseExtrapolatorOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuBasedPoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImuBasedPoseExtrapolatorOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImuBasedPoseExtrapolatorOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pose_queue_duration_, imu_rotation_weight_);
  if (GetArenaNoVirtual() == NULL && solver_options_ != NULL) delete solver_options_;
  solver_options_ = NULL;
  odometry_translation_weight_ = 0;
  odometry_rotation_weight_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool ImuBasedPoseExtrapolatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double pose_queue_duration = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_queue_duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gravity_constant;
        break;
      }

      // optional double gravity_constant = 2;
      case 2: {
        if (tag == 17) {
         parse_gravity_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gravity_constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pose_translation_weight;
        break;
      }

      // optional double pose_translation_weight = 3;
      case 3: {
        if (tag == 25) {
         parse_pose_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_pose_rotation_weight;
        break;
      }

      // optional double pose_rotation_weight = 4;
      case 4: {
        if (tag == 33) {
         parse_pose_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_imu_acceleration_weight;
        break;
      }

      // optional double imu_acceleration_weight = 5;
      case 5: {
        if (tag == 41) {
         parse_imu_acceleration_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_acceleration_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_imu_rotation_weight;
        break;
      }

      // optional double imu_rotation_weight = 6;
      case 6: {
        if (tag == 49) {
         parse_imu_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_solver_options;
        break;
      }

      // optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
      case 7: {
        if (tag == 58) {
         parse_solver_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solver_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_odometry_translation_weight;
        break;
      }

      // optional double odometry_translation_weight = 8;
      case 8: {
        if (tag == 65) {
         parse_odometry_translation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_translation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_odometry_rotation_weight;
        break;
      }

      // optional double odometry_rotation_weight = 9;
      case 9: {
        if (tag == 73) {
         parse_odometry_rotation_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_rotation_weight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return false;
#undef DO_
}

void ImuBasedPoseExtrapolatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  // optional double pose_queue_duration = 1;
  if (this->pose_queue_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pose_queue_duration(), output);
  }

  // optional double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gravity_constant(), output);
  }

  // optional double pose_translation_weight = 3;
  if (this->pose_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pose_translation_weight(), output);
  }

  // optional double pose_rotation_weight = 4;
  if (this->pose_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pose_rotation_weight(), output);
  }

  // optional double imu_acceleration_weight = 5;
  if (this->imu_acceleration_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->imu_acceleration_weight(), output);
  }

  // optional double imu_rotation_weight = 6;
  if (this->imu_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->imu_rotation_weight(), output);
  }

  // optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->solver_options_, output);
  }

  // optional double odometry_translation_weight = 8;
  if (this->odometry_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->odometry_translation_weight(), output);
  }

  // optional double odometry_rotation_weight = 9;
  if (this->odometry_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->odometry_rotation_weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
}

::google::protobuf::uint8* ImuBasedPoseExtrapolatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  // optional double pose_queue_duration = 1;
  if (this->pose_queue_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pose_queue_duration(), target);
  }

  // optional double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gravity_constant(), target);
  }

  // optional double pose_translation_weight = 3;
  if (this->pose_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pose_translation_weight(), target);
  }

  // optional double pose_rotation_weight = 4;
  if (this->pose_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pose_rotation_weight(), target);
  }

  // optional double imu_acceleration_weight = 5;
  if (this->imu_acceleration_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->imu_acceleration_weight(), target);
  }

  // optional double imu_rotation_weight = 6;
  if (this->imu_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->imu_rotation_weight(), target);
  }

  // optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->solver_options_, false, target);
  }

  // optional double odometry_translation_weight = 8;
  if (this->odometry_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->odometry_translation_weight(), target);
  }

  // optional double odometry_rotation_weight = 9;
  if (this->odometry_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->odometry_rotation_weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  return target;
}

int ImuBasedPoseExtrapolatorOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  int total_size = 0;

  // optional double pose_queue_duration = 1;
  if (this->pose_queue_duration() != 0) {
    total_size += 1 + 8;
  }

  // optional double gravity_constant = 2;
  if (this->gravity_constant() != 0) {
    total_size += 1 + 8;
  }

  // optional double pose_translation_weight = 3;
  if (this->pose_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double pose_rotation_weight = 4;
  if (this->pose_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double imu_acceleration_weight = 5;
  if (this->imu_acceleration_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double imu_rotation_weight = 6;
  if (this->imu_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  if (this->has_solver_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->solver_options_);
  }

  // optional double odometry_translation_weight = 8;
  if (this->odometry_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // optional double odometry_rotation_weight = 9;
  if (this->odometry_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuBasedPoseExtrapolatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImuBasedPoseExtrapolatorOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuBasedPoseExtrapolatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void ImuBasedPoseExtrapolatorOptions::MergeFrom(const ImuBasedPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pose_queue_duration() != 0) {
    set_pose_queue_duration(from.pose_queue_duration());
  }
  if (from.gravity_constant() != 0) {
    set_gravity_constant(from.gravity_constant());
  }
  if (from.pose_translation_weight() != 0) {
    set_pose_translation_weight(from.pose_translation_weight());
  }
  if (from.pose_rotation_weight() != 0) {
    set_pose_rotation_weight(from.pose_rotation_weight());
  }
  if (from.imu_acceleration_weight() != 0) {
    set_imu_acceleration_weight(from.imu_acceleration_weight());
  }
  if (from.imu_rotation_weight() != 0) {
    set_imu_rotation_weight(from.imu_rotation_weight());
  }
  if (from.has_solver_options()) {
    mutable_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.solver_options());
  }
  if (from.odometry_translation_weight() != 0) {
    set_odometry_translation_weight(from.odometry_translation_weight());
  }
  if (from.odometry_rotation_weight() != 0) {
    set_odometry_rotation_weight(from.odometry_rotation_weight());
  }
}

void ImuBasedPoseExtrapolatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuBasedPoseExtrapolatorOptions::CopyFrom(const ImuBasedPoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuBasedPoseExtrapolatorOptions::IsInitialized() const {

  return true;
}

void ImuBasedPoseExtrapolatorOptions::Swap(ImuBasedPoseExtrapolatorOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuBasedPoseExtrapolatorOptions::InternalSwap(ImuBasedPoseExtrapolatorOptions* other) {
  std::swap(pose_queue_duration_, other->pose_queue_duration_);
  std::swap(gravity_constant_, other->gravity_constant_);
  std::swap(pose_translation_weight_, other->pose_translation_weight_);
  std::swap(pose_rotation_weight_, other->pose_rotation_weight_);
  std::swap(imu_acceleration_weight_, other->imu_acceleration_weight_);
  std::swap(imu_rotation_weight_, other->imu_rotation_weight_);
  std::swap(solver_options_, other->solver_options_);
  std::swap(odometry_translation_weight_, other->odometry_translation_weight_);
  std::swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuBasedPoseExtrapolatorOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImuBasedPoseExtrapolatorOptions_descriptor_;
  metadata.reflection = ImuBasedPoseExtrapolatorOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuBasedPoseExtrapolatorOptions

// optional double pose_queue_duration = 1;
void ImuBasedPoseExtrapolatorOptions::clear_pose_queue_duration() {
  pose_queue_duration_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::pose_queue_duration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_queue_duration)
  return pose_queue_duration_;
}
 void ImuBasedPoseExtrapolatorOptions::set_pose_queue_duration(double value) {
  
  pose_queue_duration_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_queue_duration)
}

// optional double gravity_constant = 2;
void ImuBasedPoseExtrapolatorOptions::clear_gravity_constant() {
  gravity_constant_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::gravity_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.gravity_constant)
  return gravity_constant_;
}
 void ImuBasedPoseExtrapolatorOptions::set_gravity_constant(double value) {
  
  gravity_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.gravity_constant)
}

// optional double pose_translation_weight = 3;
void ImuBasedPoseExtrapolatorOptions::clear_pose_translation_weight() {
  pose_translation_weight_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::pose_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_translation_weight)
  return pose_translation_weight_;
}
 void ImuBasedPoseExtrapolatorOptions::set_pose_translation_weight(double value) {
  
  pose_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_translation_weight)
}

// optional double pose_rotation_weight = 4;
void ImuBasedPoseExtrapolatorOptions::clear_pose_rotation_weight() {
  pose_rotation_weight_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::pose_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_rotation_weight)
  return pose_rotation_weight_;
}
 void ImuBasedPoseExtrapolatorOptions::set_pose_rotation_weight(double value) {
  
  pose_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_rotation_weight)
}

// optional double imu_acceleration_weight = 5;
void ImuBasedPoseExtrapolatorOptions::clear_imu_acceleration_weight() {
  imu_acceleration_weight_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::imu_acceleration_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_acceleration_weight)
  return imu_acceleration_weight_;
}
 void ImuBasedPoseExtrapolatorOptions::set_imu_acceleration_weight(double value) {
  
  imu_acceleration_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_acceleration_weight)
}

// optional double imu_rotation_weight = 6;
void ImuBasedPoseExtrapolatorOptions::clear_imu_rotation_weight() {
  imu_rotation_weight_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::imu_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_rotation_weight)
  return imu_rotation_weight_;
}
 void ImuBasedPoseExtrapolatorOptions::set_imu_rotation_weight(double value) {
  
  imu_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_rotation_weight)
}

// optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
bool ImuBasedPoseExtrapolatorOptions::has_solver_options() const {
  return !_is_default_instance_ && solver_options_ != NULL;
}
void ImuBasedPoseExtrapolatorOptions::clear_solver_options() {
  if (GetArenaNoVirtual() == NULL && solver_options_ != NULL) delete solver_options_;
  solver_options_ = NULL;
}
const ::cartographer::common::proto::CeresSolverOptions& ImuBasedPoseExtrapolatorOptions::solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  return solver_options_ != NULL ? *solver_options_ : *default_instance_->solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::mutable_solver_options() {
  
  if (solver_options_ == NULL) {
    solver_options_ = new ::cartographer::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  return solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::release_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = solver_options_;
  solver_options_ = NULL;
  return temp;
}
void ImuBasedPoseExtrapolatorOptions::set_allocated_solver_options(::cartographer::common::proto::CeresSolverOptions* solver_options) {
  delete solver_options_;
  solver_options_ = solver_options;
  if (solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
}

// optional double odometry_translation_weight = 8;
void ImuBasedPoseExtrapolatorOptions::clear_odometry_translation_weight() {
  odometry_translation_weight_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::odometry_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_translation_weight)
  return odometry_translation_weight_;
}
 void ImuBasedPoseExtrapolatorOptions::set_odometry_translation_weight(double value) {
  
  odometry_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_translation_weight)
}

// optional double odometry_rotation_weight = 9;
void ImuBasedPoseExtrapolatorOptions::clear_odometry_rotation_weight() {
  odometry_rotation_weight_ = 0;
}
 double ImuBasedPoseExtrapolatorOptions::odometry_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_rotation_weight)
  return odometry_rotation_weight_;
}
 void ImuBasedPoseExtrapolatorOptions::set_odometry_rotation_weight(double value) {
  
  odometry_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_rotation_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseExtrapolatorOptions::kUseImuBasedFieldNumber;
const int PoseExtrapolatorOptions::kConstantVelocityFieldNumber;
const int PoseExtrapolatorOptions::kImuBasedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseExtrapolatorOptions::PoseExtrapolatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
}

void PoseExtrapolatorOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  constant_velocity_ = const_cast< ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions*>(&::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::default_instance());
  imu_based_ = const_cast< ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions*>(&::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::default_instance());
}

PoseExtrapolatorOptions::PoseExtrapolatorOptions(const PoseExtrapolatorOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
}

void PoseExtrapolatorOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  use_imu_based_ = false;
  constant_velocity_ = NULL;
  imu_based_ = NULL;
}

PoseExtrapolatorOptions::~PoseExtrapolatorOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseExtrapolatorOptions)
  SharedDtor();
}

void PoseExtrapolatorOptions::SharedDtor() {
  if (this != default_instance_) {
    delete constant_velocity_;
    delete imu_based_;
  }
}

void PoseExtrapolatorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseExtrapolatorOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoseExtrapolatorOptions_descriptor_;
}

const PoseExtrapolatorOptions& PoseExtrapolatorOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  return *default_instance_;
}

PoseExtrapolatorOptions* PoseExtrapolatorOptions::default_instance_ = NULL;

PoseExtrapolatorOptions* PoseExtrapolatorOptions::New(::google::protobuf::Arena* arena) const {
  PoseExtrapolatorOptions* n = new PoseExtrapolatorOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseExtrapolatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  use_imu_based_ = false;
  if (GetArenaNoVirtual() == NULL && constant_velocity_ != NULL) delete constant_velocity_;
  constant_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_based_ != NULL) delete imu_based_;
  imu_based_ = NULL;
}

bool PoseExtrapolatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_imu_based = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_imu_based_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_constant_velocity;
        break;
      }

      // optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
      case 2: {
        if (tag == 18) {
         parse_constant_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu_based;
        break;
      }

      // optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
      case 3: {
        if (tag == 26) {
         parse_imu_based:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_based()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return false;
#undef DO_
}

void PoseExtrapolatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  // optional bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_imu_based(), output);
  }

  // optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->constant_velocity_, output);
  }

  // optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_based_, output);
  }

  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseExtrapolatorOptions)
}

::google::protobuf::uint8* PoseExtrapolatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  // optional bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_imu_based(), target);
  }

  // optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->constant_velocity_, false, target);
  }

  // optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imu_based_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseExtrapolatorOptions)
  return target;
}

int PoseExtrapolatorOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  int total_size = 0;

  // optional bool use_imu_based = 1;
  if (this->use_imu_based() != 0) {
    total_size += 1 + 1;
  }

  // optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  if (this->has_constant_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->constant_velocity_);
  }

  // optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  if (this->has_imu_based()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_based_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseExtrapolatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PoseExtrapolatorOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseExtrapolatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseExtrapolatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseExtrapolatorOptions)
    MergeFrom(*source);
  }
}

void PoseExtrapolatorOptions::MergeFrom(const PoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.use_imu_based() != 0) {
    set_use_imu_based(from.use_imu_based());
  }
  if (from.has_constant_velocity()) {
    mutable_constant_velocity()->::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions::MergeFrom(from.constant_velocity());
  }
  if (from.has_imu_based()) {
    mutable_imu_based()->::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions::MergeFrom(from.imu_based());
  }
}

void PoseExtrapolatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseExtrapolatorOptions::CopyFrom(const PoseExtrapolatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseExtrapolatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseExtrapolatorOptions::IsInitialized() const {

  return true;
}

void PoseExtrapolatorOptions::Swap(PoseExtrapolatorOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseExtrapolatorOptions::InternalSwap(PoseExtrapolatorOptions* other) {
  std::swap(use_imu_based_, other->use_imu_based_);
  std::swap(constant_velocity_, other->constant_velocity_);
  std::swap(imu_based_, other->imu_based_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseExtrapolatorOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoseExtrapolatorOptions_descriptor_;
  metadata.reflection = PoseExtrapolatorOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseExtrapolatorOptions

// optional bool use_imu_based = 1;
void PoseExtrapolatorOptions::clear_use_imu_based() {
  use_imu_based_ = false;
}
 bool PoseExtrapolatorOptions::use_imu_based() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.use_imu_based)
  return use_imu_based_;
}
 void PoseExtrapolatorOptions::set_use_imu_based(bool value) {
  
  use_imu_based_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseExtrapolatorOptions.use_imu_based)
}

// optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
bool PoseExtrapolatorOptions::has_constant_velocity() const {
  return !_is_default_instance_ && constant_velocity_ != NULL;
}
void PoseExtrapolatorOptions::clear_constant_velocity() {
  if (GetArenaNoVirtual() == NULL && constant_velocity_ != NULL) delete constant_velocity_;
  constant_velocity_ = NULL;
}
const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& PoseExtrapolatorOptions::constant_velocity() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  return constant_velocity_ != NULL ? *constant_velocity_ : *default_instance_->constant_velocity_;
}
::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::mutable_constant_velocity() {
  
  if (constant_velocity_ == NULL) {
    constant_velocity_ = new ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  return constant_velocity_;
}
::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::release_constant_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* temp = constant_velocity_;
  constant_velocity_ = NULL;
  return temp;
}
void PoseExtrapolatorOptions::set_allocated_constant_velocity(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity) {
  delete constant_velocity_;
  constant_velocity_ = constant_velocity;
  if (constant_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
}

// optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
bool PoseExtrapolatorOptions::has_imu_based() const {
  return !_is_default_instance_ && imu_based_ != NULL;
}
void PoseExtrapolatorOptions::clear_imu_based() {
  if (GetArenaNoVirtual() == NULL && imu_based_ != NULL) delete imu_based_;
  imu_based_ = NULL;
}
const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& PoseExtrapolatorOptions::imu_based() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  return imu_based_ != NULL ? *imu_based_ : *default_instance_->imu_based_;
}
::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::mutable_imu_based() {
  
  if (imu_based_ == NULL) {
    imu_based_ = new ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  return imu_based_;
}
::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::release_imu_based() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* temp = imu_based_;
  imu_based_ = NULL;
  return temp;
}
void PoseExtrapolatorOptions::set_allocated_imu_based(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based) {
  delete imu_based_;
  imu_based_ = imu_based;
  if (imu_based) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
