// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_extrapolator_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/common/proto/ceres_solver_options.pb.h"
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();

class ConstantVelocityPoseExtrapolatorOptions;
class ImuBasedPoseExtrapolatorOptions;
class PoseExtrapolatorOptions;

// ===================================================================

class ConstantVelocityPoseExtrapolatorOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions) */ {
 public:
  ConstantVelocityPoseExtrapolatorOptions();
  virtual ~ConstantVelocityPoseExtrapolatorOptions();

  ConstantVelocityPoseExtrapolatorOptions(const ConstantVelocityPoseExtrapolatorOptions& from);

  inline ConstantVelocityPoseExtrapolatorOptions& operator=(const ConstantVelocityPoseExtrapolatorOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstantVelocityPoseExtrapolatorOptions& default_instance();

  void Swap(ConstantVelocityPoseExtrapolatorOptions* other);

  // implements Message ----------------------------------------------

  inline ConstantVelocityPoseExtrapolatorOptions* New() const { return New(NULL); }

  ConstantVelocityPoseExtrapolatorOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstantVelocityPoseExtrapolatorOptions& from);
  void MergeFrom(const ConstantVelocityPoseExtrapolatorOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConstantVelocityPoseExtrapolatorOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double imu_gravity_time_constant = 1;
  void clear_imu_gravity_time_constant();
  static const int kImuGravityTimeConstantFieldNumber = 1;
  double imu_gravity_time_constant() const;
  void set_imu_gravity_time_constant(double value);

  // optional double pose_queue_duration = 2;
  void clear_pose_queue_duration();
  static const int kPoseQueueDurationFieldNumber = 2;
  double pose_queue_duration() const;
  void set_pose_queue_duration(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double imu_gravity_time_constant_;
  double pose_queue_duration_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();

  void InitAsDefaultInstance();
  static ConstantVelocityPoseExtrapolatorOptions* default_instance_;
};
// -------------------------------------------------------------------

class ImuBasedPoseExtrapolatorOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions) */ {
 public:
  ImuBasedPoseExtrapolatorOptions();
  virtual ~ImuBasedPoseExtrapolatorOptions();

  ImuBasedPoseExtrapolatorOptions(const ImuBasedPoseExtrapolatorOptions& from);

  inline ImuBasedPoseExtrapolatorOptions& operator=(const ImuBasedPoseExtrapolatorOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuBasedPoseExtrapolatorOptions& default_instance();

  void Swap(ImuBasedPoseExtrapolatorOptions* other);

  // implements Message ----------------------------------------------

  inline ImuBasedPoseExtrapolatorOptions* New() const { return New(NULL); }

  ImuBasedPoseExtrapolatorOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImuBasedPoseExtrapolatorOptions& from);
  void MergeFrom(const ImuBasedPoseExtrapolatorOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImuBasedPoseExtrapolatorOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double pose_queue_duration = 1;
  void clear_pose_queue_duration();
  static const int kPoseQueueDurationFieldNumber = 1;
  double pose_queue_duration() const;
  void set_pose_queue_duration(double value);

  // optional double gravity_constant = 2;
  void clear_gravity_constant();
  static const int kGravityConstantFieldNumber = 2;
  double gravity_constant() const;
  void set_gravity_constant(double value);

  // optional double pose_translation_weight = 3;
  void clear_pose_translation_weight();
  static const int kPoseTranslationWeightFieldNumber = 3;
  double pose_translation_weight() const;
  void set_pose_translation_weight(double value);

  // optional double pose_rotation_weight = 4;
  void clear_pose_rotation_weight();
  static const int kPoseRotationWeightFieldNumber = 4;
  double pose_rotation_weight() const;
  void set_pose_rotation_weight(double value);

  // optional double imu_acceleration_weight = 5;
  void clear_imu_acceleration_weight();
  static const int kImuAccelerationWeightFieldNumber = 5;
  double imu_acceleration_weight() const;
  void set_imu_acceleration_weight(double value);

  // optional double imu_rotation_weight = 6;
  void clear_imu_rotation_weight();
  static const int kImuRotationWeightFieldNumber = 6;
  double imu_rotation_weight() const;
  void set_imu_rotation_weight(double value);

  // optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
  bool has_solver_options() const;
  void clear_solver_options();
  static const int kSolverOptionsFieldNumber = 7;
  const ::cartographer::common::proto::CeresSolverOptions& solver_options() const;
  ::cartographer::common::proto::CeresSolverOptions* mutable_solver_options();
  ::cartographer::common::proto::CeresSolverOptions* release_solver_options();
  void set_allocated_solver_options(::cartographer::common::proto::CeresSolverOptions* solver_options);

  // optional double odometry_translation_weight = 8;
  void clear_odometry_translation_weight();
  static const int kOdometryTranslationWeightFieldNumber = 8;
  double odometry_translation_weight() const;
  void set_odometry_translation_weight(double value);

  // optional double odometry_rotation_weight = 9;
  void clear_odometry_rotation_weight();
  static const int kOdometryRotationWeightFieldNumber = 9;
  double odometry_rotation_weight() const;
  void set_odometry_rotation_weight(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double pose_queue_duration_;
  double gravity_constant_;
  double pose_translation_weight_;
  double pose_rotation_weight_;
  double imu_acceleration_weight_;
  double imu_rotation_weight_;
  ::cartographer::common::proto::CeresSolverOptions* solver_options_;
  double odometry_translation_weight_;
  double odometry_rotation_weight_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();

  void InitAsDefaultInstance();
  static ImuBasedPoseExtrapolatorOptions* default_instance_;
};
// -------------------------------------------------------------------

class PoseExtrapolatorOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseExtrapolatorOptions) */ {
 public:
  PoseExtrapolatorOptions();
  virtual ~PoseExtrapolatorOptions();

  PoseExtrapolatorOptions(const PoseExtrapolatorOptions& from);

  inline PoseExtrapolatorOptions& operator=(const PoseExtrapolatorOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseExtrapolatorOptions& default_instance();

  void Swap(PoseExtrapolatorOptions* other);

  // implements Message ----------------------------------------------

  inline PoseExtrapolatorOptions* New() const { return New(NULL); }

  PoseExtrapolatorOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseExtrapolatorOptions& from);
  void MergeFrom(const PoseExtrapolatorOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseExtrapolatorOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_imu_based = 1;
  void clear_use_imu_based();
  static const int kUseImuBasedFieldNumber = 1;
  bool use_imu_based() const;
  void set_use_imu_based(bool value);

  // optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
  bool has_constant_velocity() const;
  void clear_constant_velocity();
  static const int kConstantVelocityFieldNumber = 2;
  const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& constant_velocity() const;
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* mutable_constant_velocity();
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* release_constant_velocity();
  void set_allocated_constant_velocity(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity);

  // optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
  bool has_imu_based() const;
  void clear_imu_based();
  static const int kImuBasedFieldNumber = 3;
  const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& imu_based() const;
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* mutable_imu_based();
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* release_imu_based();
  void set_allocated_imu_based(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseExtrapolatorOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity_;
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based_;
  bool use_imu_based_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto();

  void InitAsDefaultInstance();
  static PoseExtrapolatorOptions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstantVelocityPoseExtrapolatorOptions

// optional double imu_gravity_time_constant = 1;
inline void ConstantVelocityPoseExtrapolatorOptions::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
}
inline double ConstantVelocityPoseExtrapolatorOptions::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
inline void ConstantVelocityPoseExtrapolatorOptions::set_imu_gravity_time_constant(double value) {
  
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.imu_gravity_time_constant)
}

// optional double pose_queue_duration = 2;
inline void ConstantVelocityPoseExtrapolatorOptions::clear_pose_queue_duration() {
  pose_queue_duration_ = 0;
}
inline double ConstantVelocityPoseExtrapolatorOptions::pose_queue_duration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.pose_queue_duration)
  return pose_queue_duration_;
}
inline void ConstantVelocityPoseExtrapolatorOptions::set_pose_queue_duration(double value) {
  
  pose_queue_duration_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions.pose_queue_duration)
}

// -------------------------------------------------------------------

// ImuBasedPoseExtrapolatorOptions

// optional double pose_queue_duration = 1;
inline void ImuBasedPoseExtrapolatorOptions::clear_pose_queue_duration() {
  pose_queue_duration_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::pose_queue_duration() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_queue_duration)
  return pose_queue_duration_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_pose_queue_duration(double value) {
  
  pose_queue_duration_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_queue_duration)
}

// optional double gravity_constant = 2;
inline void ImuBasedPoseExtrapolatorOptions::clear_gravity_constant() {
  gravity_constant_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::gravity_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.gravity_constant)
  return gravity_constant_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_gravity_constant(double value) {
  
  gravity_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.gravity_constant)
}

// optional double pose_translation_weight = 3;
inline void ImuBasedPoseExtrapolatorOptions::clear_pose_translation_weight() {
  pose_translation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::pose_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_translation_weight)
  return pose_translation_weight_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_pose_translation_weight(double value) {
  
  pose_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_translation_weight)
}

// optional double pose_rotation_weight = 4;
inline void ImuBasedPoseExtrapolatorOptions::clear_pose_rotation_weight() {
  pose_rotation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::pose_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_rotation_weight)
  return pose_rotation_weight_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_pose_rotation_weight(double value) {
  
  pose_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.pose_rotation_weight)
}

// optional double imu_acceleration_weight = 5;
inline void ImuBasedPoseExtrapolatorOptions::clear_imu_acceleration_weight() {
  imu_acceleration_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::imu_acceleration_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_acceleration_weight)
  return imu_acceleration_weight_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_imu_acceleration_weight(double value) {
  
  imu_acceleration_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_acceleration_weight)
}

// optional double imu_rotation_weight = 6;
inline void ImuBasedPoseExtrapolatorOptions::clear_imu_rotation_weight() {
  imu_rotation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::imu_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_rotation_weight)
  return imu_rotation_weight_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_imu_rotation_weight(double value) {
  
  imu_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.imu_rotation_weight)
}

// optional .cartographer.common.proto.CeresSolverOptions solver_options = 7;
inline bool ImuBasedPoseExtrapolatorOptions::has_solver_options() const {
  return !_is_default_instance_ && solver_options_ != NULL;
}
inline void ImuBasedPoseExtrapolatorOptions::clear_solver_options() {
  if (GetArenaNoVirtual() == NULL && solver_options_ != NULL) delete solver_options_;
  solver_options_ = NULL;
}
inline const ::cartographer::common::proto::CeresSolverOptions& ImuBasedPoseExtrapolatorOptions::solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  return solver_options_ != NULL ? *solver_options_ : *default_instance_->solver_options_;
}
inline ::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::mutable_solver_options() {
  
  if (solver_options_ == NULL) {
    solver_options_ = new ::cartographer::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  return solver_options_;
}
inline ::cartographer::common::proto::CeresSolverOptions* ImuBasedPoseExtrapolatorOptions::release_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = solver_options_;
  solver_options_ = NULL;
  return temp;
}
inline void ImuBasedPoseExtrapolatorOptions::set_allocated_solver_options(::cartographer::common::proto::CeresSolverOptions* solver_options) {
  delete solver_options_;
  solver_options_ = solver_options;
  if (solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.solver_options)
}

// optional double odometry_translation_weight = 8;
inline void ImuBasedPoseExtrapolatorOptions::clear_odometry_translation_weight() {
  odometry_translation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::odometry_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_translation_weight)
  return odometry_translation_weight_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_odometry_translation_weight(double value) {
  
  odometry_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_translation_weight)
}

// optional double odometry_rotation_weight = 9;
inline void ImuBasedPoseExtrapolatorOptions::clear_odometry_rotation_weight() {
  odometry_rotation_weight_ = 0;
}
inline double ImuBasedPoseExtrapolatorOptions::odometry_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_rotation_weight)
  return odometry_rotation_weight_;
}
inline void ImuBasedPoseExtrapolatorOptions::set_odometry_rotation_weight(double value) {
  
  odometry_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions.odometry_rotation_weight)
}

// -------------------------------------------------------------------

// PoseExtrapolatorOptions

// optional bool use_imu_based = 1;
inline void PoseExtrapolatorOptions::clear_use_imu_based() {
  use_imu_based_ = false;
}
inline bool PoseExtrapolatorOptions::use_imu_based() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.use_imu_based)
  return use_imu_based_;
}
inline void PoseExtrapolatorOptions::set_use_imu_based(bool value) {
  
  use_imu_based_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseExtrapolatorOptions.use_imu_based)
}

// optional .cartographer.mapping.proto.ConstantVelocityPoseExtrapolatorOptions constant_velocity = 2;
inline bool PoseExtrapolatorOptions::has_constant_velocity() const {
  return !_is_default_instance_ && constant_velocity_ != NULL;
}
inline void PoseExtrapolatorOptions::clear_constant_velocity() {
  if (GetArenaNoVirtual() == NULL && constant_velocity_ != NULL) delete constant_velocity_;
  constant_velocity_ = NULL;
}
inline const ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions& PoseExtrapolatorOptions::constant_velocity() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  return constant_velocity_ != NULL ? *constant_velocity_ : *default_instance_->constant_velocity_;
}
inline ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::mutable_constant_velocity() {
  
  if (constant_velocity_ == NULL) {
    constant_velocity_ = new ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  return constant_velocity_;
}
inline ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* PoseExtrapolatorOptions::release_constant_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
  
  ::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* temp = constant_velocity_;
  constant_velocity_ = NULL;
  return temp;
}
inline void PoseExtrapolatorOptions::set_allocated_constant_velocity(::cartographer::mapping::proto::ConstantVelocityPoseExtrapolatorOptions* constant_velocity) {
  delete constant_velocity_;
  constant_velocity_ = constant_velocity;
  if (constant_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.constant_velocity)
}

// optional .cartographer.mapping.proto.ImuBasedPoseExtrapolatorOptions imu_based = 3;
inline bool PoseExtrapolatorOptions::has_imu_based() const {
  return !_is_default_instance_ && imu_based_ != NULL;
}
inline void PoseExtrapolatorOptions::clear_imu_based() {
  if (GetArenaNoVirtual() == NULL && imu_based_ != NULL) delete imu_based_;
  imu_based_ = NULL;
}
inline const ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions& PoseExtrapolatorOptions::imu_based() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  return imu_based_ != NULL ? *imu_based_ : *default_instance_->imu_based_;
}
inline ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::mutable_imu_based() {
  
  if (imu_based_ == NULL) {
    imu_based_ = new ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  return imu_based_;
}
inline ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* PoseExtrapolatorOptions::release_imu_based() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
  
  ::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* temp = imu_based_;
  imu_based_ = NULL;
  return temp;
}
inline void PoseExtrapolatorOptions::set_allocated_imu_based(::cartographer::mapping::proto::ImuBasedPoseExtrapolatorOptions* imu_based) {
  delete imu_based_;
  imu_based_ = imu_based;
  if (imu_based) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseExtrapolatorOptions.imu_based)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto__INCLUDED
