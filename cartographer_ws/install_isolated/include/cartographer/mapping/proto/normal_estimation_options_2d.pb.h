// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/normal_estimation_options_2d.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();

class NormalEstimationOptions2D;

// ===================================================================

class NormalEstimationOptions2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.NormalEstimationOptions2D) */ {
 public:
  NormalEstimationOptions2D();
  virtual ~NormalEstimationOptions2D();

  NormalEstimationOptions2D(const NormalEstimationOptions2D& from);

  inline NormalEstimationOptions2D& operator=(const NormalEstimationOptions2D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalEstimationOptions2D& default_instance();

  void Swap(NormalEstimationOptions2D* other);

  // implements Message ----------------------------------------------

  inline NormalEstimationOptions2D* New() const { return New(NULL); }

  NormalEstimationOptions2D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalEstimationOptions2D& from);
  void MergeFrom(const NormalEstimationOptions2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalEstimationOptions2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_normal_samples = 1;
  void clear_num_normal_samples();
  static const int kNumNormalSamplesFieldNumber = 1;
  ::google::protobuf::int32 num_normal_samples() const;
  void set_num_normal_samples(::google::protobuf::int32 value);

  // optional float sample_radius = 2;
  void clear_sample_radius();
  static const int kSampleRadiusFieldNumber = 2;
  float sample_radius() const;
  void set_sample_radius(float value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.NormalEstimationOptions2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 num_normal_samples_;
  float sample_radius_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
  friend void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();
  friend void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto();

  void InitAsDefaultInstance();
  static NormalEstimationOptions2D* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalEstimationOptions2D

// optional int32 num_normal_samples = 1;
inline void NormalEstimationOptions2D::clear_num_normal_samples() {
  num_normal_samples_ = 0;
}
inline ::google::protobuf::int32 NormalEstimationOptions2D::num_normal_samples() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NormalEstimationOptions2D.num_normal_samples)
  return num_normal_samples_;
}
inline void NormalEstimationOptions2D::set_num_normal_samples(::google::protobuf::int32 value) {
  
  num_normal_samples_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NormalEstimationOptions2D.num_normal_samples)
}

// optional float sample_radius = 2;
inline void NormalEstimationOptions2D::clear_sample_radius() {
  sample_radius_ = 0;
}
inline float NormalEstimationOptions2D::sample_radius() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NormalEstimationOptions2D.sample_radius)
  return sample_radius_;
}
inline void NormalEstimationOptions2D::set_sample_radius(float value) {
  
  sample_radius_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NormalEstimationOptions2D.sample_radius)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fnormal_5festimation_5foptions_5f2d_2eproto__INCLUDED
